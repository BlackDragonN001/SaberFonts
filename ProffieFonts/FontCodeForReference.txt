// Hyper Rotoscope Intensity (Swing slows down speed param of stripes)

	Mix<
		HoldPeakF<
			SwingSpeed<250>,
			Scale<
				SwingAcceleration<100>,
				Int<50>,
				Int<500>
			>,
			Scale<
				SwingAcceleration<>,
				Int<20000>,
				Int<10000>
			>
		>,
		RandomFlicker<
			StripesX<
				Int<15000>,
				Scale<
					HoldPeakF<
						SwingSpeed<200>,
						Scale<
							SwingAcceleration<100>,
							Int<50>,
							Int<300>
						>,
						Scale<
							SwingAcceleration<100>,
							Int<24000>,
							Int<16000>
						>
					>,
					Int<-3200>,
					Int<-200>
				>,
				RgbArg<BASE_COLOR_ARG,Rgb<0,0,255>>,
				RgbArg<BASE_COLOR_ARG,Rgb<0,0,255>>,
				Mix<
					Int<7710>,
					Black,
					RgbArg<BASE_COLOR_ARG,Rgb<0,0,255>>
				>,
				RgbArg<BASE_COLOR_ARG,Rgb<0,0,255>>,
				Mix<
					Int<19276>,
					Black,
					RgbArg<BASE_COLOR_ARG,Rgb<0,0,255>>
				>
			>,
			RgbArg<BASE_COLOR_ARG,Rgb<0,0,255>>
		>,
		RgbArg<BASE_COLOR_ARG,Rgb<0,0,255>>
	>,





			
/*
// Basic blade style, default color White.
using BasicBladeStyle = Layers <

	// On Effect
	BasicBladeFlicker,

	// Lockup Effect
	LockupTrL <
		Layers <
			AlphaL<
				AudioFlickerL<White>,
				Bump<
					Scale<
						BladeAngle<>,
						Scale<
							BladeAngle<0, 16000>,
							Int<4000>,
							Int<26000>
						>,
						Int<6000>
					>,
					Scale<
						SwingSpeed<100>,
						Int<14000>,
						Int<18000>
					>
				>
			>,
			AlphaL<
				White,
				Bump<
					Scale<
						BladeAngle<>,
						Scale<
							BladeAngle<0, 16000>,
							Int<4000>,
							Int<26000>
						>,
						Int<6000>
					>,
					Int<10000>
				>
			>
		> ,
		TrConcat<
			TrInstant,
			White,
			TrFade<400>
		>,
		TrConcat<
			TrInstant,
			White,
			TrFade<400>
		>,
		SaberBase::LOCKUP_NORMAL
	> ,

	// Lightning Block
	ResponsiveLightningBlockL <
		Strobe<
			White,
			AudioFlicker<White, Blue>,
			50,
			1
		>,
		TrConcat<
			TrInstant,
			AlphaL<
				White,
				Bump<
					Int<12000>,
					Int<18000>
				>
			>,
			TrFade<200>
		>,
		TrConcat<
			TrInstant,
			HumpFlickerL<
				AlphaL<
					White,
					Int<16000>
				>,
				30
			>,
			TrSmoothFade<600>
		>
	>,

	// Stab
	ResponsiveStabL<
		Red,
		TrWipeIn<600>,
		TrWipe<600>
	>,

	// Blaster
	ResponsiveBlastFadeL<
		White,
		Scale<
			SwingSpeed<200>,
			Int<8000>,
			Int<16000>
		>,
		Int<400>
	>,

	// Clash
	ResponsiveClashL<
		White,
		TrInstant,
		TrFade<400>,
		Scale<
			BladeAngle<0, 16000>,
			Int<4000>,
			Int<26000>
		>,
		Int<6000>,
		Int<20000>
	>,

	// Drag
	LockupTrL<
		AlphaL<
			BrownNoiseFlickerL<
				White,
				Int<300>
			>,
			SmoothStep<
				Int<30000>,
				Int<5000>
			>
		>,
		TrWipeIn<400>,
		TrFade<300>,
		SaberBase::LOCKUP_DRAG
	>,

	// Melt
	LockupTrL<
		AlphaL<
			Mix<
				TwistAngle<>,
				Red,
				Orange
			>,
			SmoothStep<
				Int<28000>,
				Int<5000>
			>
		>,
		TrWipeIn<600>,
		TrFade<300>,
		SaberBase::LOCKUP_MELT
	>,

	// In/Out
	InOutTrL<
		TrWipe<300>,
		TrWipeInX<RetractionTime<0>>,
		Black
	>,

	// Battery Monitor on Boot
	BatteryLevelOnBoot,

	// Battery level on font change
	BatteryLevelOnFontChange,

	// Battery level
	BatteryLevelOnDemand
>;
*/

/*--------------------------------- Basic Blade Style -------------------------
copyright Fett263 Simple (Primary Blade) OS6 Style
https://fett263.com/fett263-proffieOS6-style-library.html#Simple
OS6.7 v4.021
Single Style
Base Style: AudioFlicker (Single Color (75%))


--Effects Included--
Ignition Effect: Standard Ignition
Retraction Effect: Standard Retraction
PostOff Effect: Emitter Cool Off (Emitter Size)
Lockup Effect: Responsive Lockup, Begin Effect: Real Clash, End Effect: Full Blade Absorb
LightningBlock Effect: Responsive Lightning Block
Drag Effect: Intensity Sparking Drag
Melt Effect: Responsive Melt
Stab Effect: AudioFlicker Stab
Clash Effect: Responsive Clash with Wave
Battery Level: Blade Location (Green to Red)
*/
/*
using BasicBladeStyle2 = Layers<

	// On effect
	BasicBladeFlicker,
	
	// Stab
	TransitionEffectL<
		TrConcat<
			TrJoin<
				TrDelayX<WavLen<>>,
				TrWipeIn<200>
			>,
			AlphaL<
				AudioFlickerL<
					STABCOLOR
				>,
				SmoothStep<
					IntArg<MELT_SIZE_ARG,28000>,
					Int<2000>
				>
			>,
			TrWipe<200>
		>,
		EFFECT_STAB
	>,
	
	// Clash
	TransitionEffectL<
		TrWaveX<
			RgbArg<CLASH_COLOR_ARG,Rgb<255,255,255>>,
			Scale<
				ClashImpactF<>,
				Int<100>,
				Int<400>
			>,
			Int<100>,
			Scale<
				ClashImpactF<>,
				Int<100>,
				Int<400>
			>,
			LockupScale
		>,
		EFFECT_CLASH
	>,
	
	// Lockup
	LockupTrL<
		AlphaMixL<
			Bump<
				Scale<
					BladeAngle<>,
					Scale<
						BladeAngle<0,16000>,
						Sum<
							IntArg<LOCKUP_POSITION_ARG,16000>,
							Int<-12000>
						>,
						Sum<
							IntArg<LOCKUP_POSITION_ARG,16000>,
							Int<10000>
						>
					>,
					Scale<
						SwingSpeed<100>,
						Int<14000>,
						Int<18000>
					>
				>
			>,
			AudioFlickerL<RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>>,
			BrownNoiseFlickerL<
				RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,
				Int<200>
			>
		>,
		TrConcat<
			TrInstant,
			RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,
			TrFade<400>
		>,
		TrConcat<
			TrInstant,
			RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,
			TrFade<400>
		>,
		SaberBase::LOCKUP_NORMAL
	>,
	
	// Lightning block
	ResponsiveLightningBlockL<
		Strobe<
			RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,
			AudioFlicker<
				RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,
				Blue
			>,
			50,
			1
		>,
		TrConcat<
			TrInstant,
			AlphaL<
				RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,
				Bump<
					Int<12000>,
					Int<18000>
				>
			>,
			TrFade<200>
		>,
		TrConcat<
			TrInstant,
			HumpFlickerL<
				AlphaL<
					RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,
					Int<16000>
				>,
				30
			>,
			TrSmoothFade<600>
		>
	>,
	
	// Drag
	LockupTrL<
		AlphaL<
			RandomPerLEDFlickerL<RgbArg<DRAG_COLOR_ARG,Rgb<255,14,0>>>,
			SmoothStep<
				IntArg<DRAG_SIZE_ARG,28000>,
				Int<3000>
			>
		>,
		TrConcat<
			TrJoin<
				TrDelay<4000>,
				TrWipeIn<200>
			>,
			AlphaL<
				BrownNoiseFlickerL<
					RgbArg<DRAG_COLOR_ARG,Rgb<255,14,0>>,
					Int<300>
				>,
				SmoothStep<
					IntArg<DRAG_SIZE_ARG,28000>,
					Int<3000>
				>
			>,
			TrFade<4000>
		>,
		TrFade<300>,
		SaberBase::LOCKUP_DRAG
	>,

	ResponsiveEffectBlastStyle,
	
	// Melt
	LockupTrL<
		AlphaL<
			Mix<
				TwistAngle<>,
				RgbArg<STAB_COLOR_ARG,Rgb<255,24,0>>,
				RotateColorsX<
					Int<3000>,
					RgbArg<STAB_COLOR_ARG,Rgb<255,24,0>>
				>
			>,
			SmoothStep<
				IntArg<MELT_SIZE_ARG,28000>,
				Int<4000>
			>
		>,
		TrConcat<
			TrWipeIn<100>,
			AlphaL<
				RgbArg<STAB_COLOR_ARG,Rgb<255,24,0>>,
				SmoothStep<
					IntArg<MELT_SIZE_ARG,28000>,
					Int<4000>
				>
			>,
			TrFade<300>
		>,
		TrWipe<200>,
		SaberBase::LOCKUP_MELT
	>,
	
	// In/Out
	InOutTrL<
		TrWipeX<IgnitionTime<300>>,
		TrWipeInX<RetractionTime<0>>,
		Black
	>,
	
	// Post Off
	TransitionEffectL<
		EmitterCoolOffStyle,
		EFFECT_POSTOFF
	>,
	
	// Battery Monitor on Boot
	BatteryLevelOnBoot,

	// Battery level on font change
	BatteryLevelOnFontChange,

	// Battery level
	BatteryLevelOnDemand
>;
/*
Add to preset as StylePtr<MainAudioFlickerSingleColor75%OrangeRed>()
--------------------------------------------------------------------------*/

/*
//
// Thunderstorm style (blue with flashing lightning)
//
using ThunderStorm = Layers<

	// On effect
	TransitionLoop<
		RotateColorsX<
			Variation,
			DeepSkyBlue
		>,
		TrConcat<
			TrBoing<500,3>,
			Layers<
				Stripes<
					10000,
					100,
					RotateColorsX<
						Variation,
						Rgb<0,40,128>
					>,
					RotateColorsX<
						Variation,
						Rgb<0,8,30>
					>,
					RotateColorsX<
						Variation,
						Rgb<0,63,200>
					>
				>,
				AlphaL<
					Stripes<
						8000,
						-200,
						RotateColorsX<
							Variation,
							DeepSkyBlue
						>,
						RotateColorsX<
							Variation,
							Rgb<0,19,60>
						>
					>,
					Int<16384>
				>
			>,
			TrDelayX<
				Scale<
					SlowNoise<Int<3000>>,
					Int<100>,
					Int<2000>
				>
			>
		>
	>,
		
	// Lockup
	LockupTrL<
		Layers<
			AlphaL<
				AudioFlickerL<White>,
				Bump<
					Scale<
						BladeAngle<>,
						Scale<
							BladeAngle<0, 16000>,
							Int<4000>,
							Int<26000>
						>,
						Int<6000>
					>,
					Scale<
						SwingSpeed<100>,
						Int<14000>,
						Int<18000>
					>
				>
			>,
			AlphaL<
				White,
				Bump<
					Scale<
						BladeAngle<>,
						Scale<
							BladeAngle<0, 16000>,
							Int<4000>,
							Int<26000>
						>,
						Int<6000>
					>,
					Int<10000>
				>
			>
		>,
		TrConcat<
			TrInstant,
			White,
			TrFade<400>
		>,
		TrConcat<
			TrInstant,
			White,
			TrFade<400>
		>,
		SaberBase::LOCKUP_NORMAL
	>,
		
	// Lightning block
	ResponsiveLightningBlockL<
		Strobe<
			White,
			AudioFlicker<
				White,
				Blue
			>,
			50,
			1
		>,
		TrConcat<
			TrInstant,
			AlphaL<
				White,
				Bump<
					Int<12000>,
					Int<18000>
				>
			>,
			TrFade<200>
		>,
		TrConcat<
			TrInstant,
			HumpFlickerL<
				AlphaL<
					White,
					Int<16000>
				>,
				30
			>,
			TrSmoothFade<600>
		>
	>,
		
	// Stab effect
	ResponsiveStabL<
		Red,
		TrWipeIn<600>,
		TrWipe<600>
	>,
	
	ResponsiveEffectBlastStyle,
		
	// Clash effect
	ResponsiveClashL<
		White,
		TrInstant,
		TrFade<400>,
		Scale<
			BladeAngle<0, 16000>,
			Int<4000>,
			Int<26000>
		>,
		Int<6000>,
		Int<20000>
	>,
		
	// Drag effect
	LockupTrL<
		AlphaL<
			BrownNoiseFlickerL<
				White,
				Int<300>
			>,
			SmoothStep<
				Int<30000>,
				Int<5000>
			>
		>,
		TrWipeIn<400>,
		TrFade<300>,
		SaberBase::LOCKUP_DRAG
	>,
		
	// Melt effect
	LockupTrL<
		AlphaL<
			Mix<
				TwistAngle<>,
				Red,
				Orange
			>,
			SmoothStep<
				Int<28000>,
				Int<5000>
			>
		>,
		TrWipeIn<600>,
		TrFade<300>,
		SaberBase::LOCKUP_MELT
	>,
		
	// In/Out effect
	InOutTrL<
		TrWipe<300>,
		TrWipeIn<500>,
		Black
	>,

	// Battery Monitor on Boot
	BatteryLevelOnBoot,

	// Battery level on font change
	BatteryLevelOnFontChange,

	// Battery level
	BatteryLevelOnDemand
>;
// */

/*--------------------------------- BrokenBladeDragon -------------------------
copyright Fett263 CustomBlade (Primary Blade) OS6 Style
https://fett263.com/fett263-proffieOS6-style-library.html#CustomBlade
OS6.7 v4.021
This Style Contains 2 Unique Combinations
Rotoscope (Erratic)


--Effects Included--
Preon Effect: Faulty Ignition (Base Color)
Ignition Effect: SparkTip Ignition
PowerUp Effect: Power Burst Emitter
Retraction Effect Options: Default (0): Glitch Off, 1: SparkTip Retraction
CoolDown Effect: Power Burst Center Out
PostOff Effect: Emitter Cool Off (Emitter Size)
Lockup Effect: Responsive Lockup, Begin Effect: Real Clash, End Effect: Full Blade Absorb
LightningBlock Effect: Responsive Lightning Block
Drag Effect: Intensity Sparking Drag
Melt Effect: Responsive Melt
Stab Effect: AudioFlicker Stab
Blast Effect: Blast Wave (Random)
Clash Effect: Responsive Clash with Wave
Emitter Effect: Flickering Flare
Battery Level: Blade Location (Green to Red)
*/
/*
using BrokenBladeDragon = Layers<
	// On Effect
	Mix<
		Scale<
			IsLessThan<
				SlowNoise<
					Int<2000>
				>, 
				Int<18000>
			>, 
			Int<0>, 
			Int<32768>
		>, 
		Gradient<
			RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>, 
			Mix<
				Int<9921>, 
				Black, 
				RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>
			>
		>, 
		Stripes<
			12000, 
			-800, 
			Gradient<
				RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>, 
				Mix<
					Int<9921>, 
					Black, 
					RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>
				>
			>, 
			Gradient<
				RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>, 
				Mix<
					Int<9921>, 
					Black, 
					RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>
				>
			>, 
			Mix<
				Int<7710>, 
				Black, 
				Gradient<
					RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>, 
					Mix<
						Int<9921>, 
						Black, 
						RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>
					>
				>
			>, 
			Gradient<
				RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>, 
				Mix<
					Int<9921>, 
					Black, 
					RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>
				>
			>, 
			Mix<
				Int<16448>, 
				Black, 
				Gradient<
					RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>, 
					Mix<
						Int<9921>, 
						Black, 
						RgbArg<BASE_COLOR_ARG, Rgb<61, 200, 255>>
					>
				>
			>
		>
	>, 
	// Emitter Flare when On
	AlphaL<
		AudioFlickerL<
			RgbArg<EMITTER_COLOR_ARG, Rgb<80, 50, 210>>
		>, 
		SmoothStep<
			IntArg<EMITTER_SIZE_ARG, 2000>, 
			Int<-6000>
		>
	>, 
	
	// Ignition Effect
	TransitionEffectL<
		TrConcat<
			TrJoin<
				TrDelayX<
					IgnitionTime<300>
				>, 
				TrInstant
			>, 
			AlphaL<
				Stripes<
					5000, 
					-2500, 
					IGNITIONCOLOR, 
					Mix<
						Int<7710>, 
						Black, 
						IGNITIONCOLOR
					>, 
					Mix<
						Int<3855>, 
						Black, 
						IGNITIONCOLOR
					>
				>, 
				SmoothStep<
					IntArg<EMITTER_SIZE_ARG, 2000>, 
					Int<-500>
				>
			>, 
			TrFade<500>
		>, 
		EFFECT_IGNITION
	>, 
	
	// Retraction Effect
	TransitionEffectL<
		TrConcat<
			TrJoin<
				TrDelayX<
					RetractionTime<0>
				>, 
				TrInstant
			>, 
			Remap<
				CenterDistF<>, 
				Stripes<
					5000, 
					-2500, 
					RgbArg<RETRACTION_COLOR_ARG, Rgb<100, 200, 250>>, 
					Mix<
						Int<7710>, 
						Black, 
						RgbArg<RETRACTION_COLOR_ARG, Rgb<100, 200, 250>>
					>, 
					Mix<
						Int<3855>, 
						Black, 
						RgbArg<RETRACTION_COLOR_ARG, Rgb<100, 200, 250>>
					>
				>
			>, 
			TrFade<800>
		>, 
		EFFECT_RETRACTION
	>, 
	
	// Stab effect
	TransitionEffectL<
		TrConcat<
			TrJoin<
				TrDelayX<WavLen<>>, 
				TrWipeIn<200>
			>, 
			AlphaL<
				AudioFlickerL<
					STABCOLOR
				>, 
				SmoothStep<
					IntArg<MELT_SIZE_ARG, 28000>, 
					Int<2000>
				>
			>, 
			TrWipe<200>
		>, 
		EFFECT_STAB
	>, 
	
	ResponsiveEffectBlastStyle,
	
	// Clash effect
	TransitionEffectL<
		TrWaveX<
			CLASHCOLOR, 
			Scale<
				ClashImpactF<>, 
				Int<100>, 
				Int<400>
			>, 
			Int<100>, 
			Scale<
				ClashImpactF<>, 
				Int<100>, 
				Int<400>
			>, 
			LockupScale
		>, 
		EFFECT_CLASH
	>, 
	
	// Lockup effect
	ResponsiveLockupL <
	//LockupTrL<
		AlphaMixL<
			Bump<
				Scale<
					BladeAngle<>, 
					Scale<
						BladeAngle<0, 16000>, 
						Sum<
							IntArg<LOCKUP_POSITION_ARG, 16000>, 
							Int<-12000>
						>, 
						Sum<
							IntArg<LOCKUP_POSITION_ARG, 16000>, 
							Int<10000>
						>
					>, 
					Scale<
						SwingSpeed<100>, 
						Int<14000>, 
						Int<18000>
					>
				>
			>, 
			AudioFlickerL<
				LOCKUPCOLOR
			>, 
			BrownNoiseFlickerL<
				LOCKUPCOLOR, 
				Int<200>
			>
		>, 
		TrConcat<
			TrInstant, 
			LOCKUPCOLOR, 
			TrFade<400>
		>, 
		TrConcat<
			TrInstant, 
			LOCKUPCOLOR, 
			TrFade<400>
		> 
		//SaberBase::LOCKUP_NORMAL
	>, 
	
	// Lightning block
	ResponsiveLightningBlockL<
		Strobe<
			LBCOLOR, 
			AudioFlicker<
				LBCOLOR, 
				Blue
			>, 
			50, 
			1
		>, 
		TrConcat<
			TrInstant, 
			AlphaL<
				LBCOLOR, 
				Bump<
					Int<12000>, 
					Int<18000>
				>
			>, 
			TrFade<200>
		>, 
		TrConcat<
			TrInstant, 
			HumpFlickerL<
				AlphaL<
					LBCOLOR, 
					Int<16000>
				>, 
				30
			>, 
			TrSmoothFade<600>
		>
	>, 
	
	// Drag effect
	ResponsiveDragL <
	//LockupTrL<
		AlphaL<
			RandomPerLEDFlickerL<
				RgbArg<DRAG_COLOR_ARG, Rgb<255, 14, 0>>
			>, 
			SmoothStep<
				IntArg<DRAG_SIZE_ARG, 28000>, 
				Int<3000>
			>
		>, 
		TrConcat<
			TrJoin<
				TrDelay<4000>, 
				TrWipeIn<200>
			>, 
			AlphaL<
				BrownNoiseFlickerL<
					RgbArg<DRAG_COLOR_ARG, Rgb<255, 14, 0>>, 
					Int<300>
				>, 
				SmoothStep<
					IntArg<DRAG_SIZE_ARG, 28000>, 
					Int<3000>
				>
			>, 
			TrFade<4000>
		>, 
		TrFade<300>
		//SaberBase::LOCKUP_DRAG
	>, 
	
	// Melt effect
	ResponsiveMeltL <
	//LockupTrL<
		AlphaL<
			Mix<
				TwistAngle<>, 
				STABCOLOR, 
				RotateColorsX<
					Int<3000>, 
					STABCOLOR
				>
			>, 
			SmoothStep<
				IntArg<MELT_SIZE_ARG, 28000>, 
				Int<4000>
			>
		>, 
		TrConcat<
			TrWipeIn<100>, 
			AlphaL<
				STABCOLOR, 
				SmoothStep<
					IntArg<MELT_SIZE_ARG, 28000>, 
					Int<4000>
				>
			>, 
			TrFade<300>
		>, 
		TrWipe<200> 
		//SaberBase::LOCKUP_MELT
	>, 
	
	// In/Out Effect
	InOutTrL<
		TrWipeSparkTipX<
			RgbArg<IGNITION_COLOR_ARG, Rgb<200, 255, 255>>, 
			IgnitionTime<300>
		>, 
		TrSelect<
			IntArg<RETRACTION_OPTION_ARG, 0>, 
			TrConcat<
				TrJoin<
					TrDelayX<
						Mult<
							RetractionTime<0>, 
							Int<16384>
						>
					>, 
					TrWipeInX<
						Mult<
							RetractionTime<0>, 
							Int<16384>
						>
					>
				>, 
				Mix<
					SmoothStep<
						NoisySoundLevel, 
						Int<-1>
					>,
					Black, 
					RETRACTIONCOLOR
				>, 
				TrWipeInX<
					Mult<
						RetractionTime<0>, 
						Int<16384>
					>
				>
			>, 
			TrWipeInSparkTipX<
				RETRACTIONCOLOR, 
				RetractionTime<0>
			>
		>, 
		Black
	>, 
	
	// Pre on Effect
	TransitionEffectL<
		TrConcat<
			TrInstant, 
			AlphaL<
				RandomPerLEDFlicker<
					RgbArg<BASE_COLOR_ARG, Rgb<0, 200, 255>>, 
					Black
				>, 
				SmoothStep<
					Scale<
						NoisySoundLevel, 
						Int<-10000>, 
						Int<36000>
					>, 
					Int<-4000>
				>
			>, 
			TrDelayX<
				WavLen<EFFECT_PREON>
			>
		>, 
		EFFECT_PREON
	>, 

	TransitionEffectL<
		EmitterCoolOffStyle,
		EFFECT_POSTOFF
	>,
	
	// Battery Monitor on Boot
	BatteryLevelOnBoot,

	// Battery level on font change
	BatteryLevelOnFontChange,

	// Battery level
	BatteryLevelOnDemand
>;

/*
Add to preset as StylePtr<BrokenBladeDragon>()
--------------------------------------------------------------------------*/


/*--------------------------------- RedBaylinSkull -------------------------
copyright Fett263 Simple (Primary Blade) OS6 Style
https://fett263.com/fett263-proffieOS6-style-library.html#Simple
OS6.7 v4.021
Single Style
Base Style: AudioFlicker (Single Color (75%))


--Effects Included--
Ignition Effect: Standard Ignition
Retraction Effect: Standard Retraction
PostOff Effect: Emitter Cool Off (Emitter Size)
Lockup Effect: Responsive Lockup, Begin Effect: Real Clash, End Effect: Full Blade Absorb
LightningBlock Effect: Responsive Lightning Block
Drag Effect: Intensity Sparking Drag
Melt Effect: Responsive Melt
Stab Effect: AudioFlicker Stab
Clash Effect: Responsive Clash with Wave
Emitter Effect: Unstable Flare with Random Pulse
Battery Level: Blade Location (Green to Red)
*/
/*
using RedBaylinSkull = Layers<
	// Main blade
	AudioFlicker<
		RgbArg<BASE_COLOR_ARG,Rgb<255,14,0>>,
		Mix<
			Int<24576>,
			Black,
			RgbArg<BASE_COLOR_ARG,Rgb<255,14,0>>
		>
	>,
	TransitionLoopL<
		TrConcat<
			TrDelayX<
				Scale<
					SlowNoise<Int<1000>>,
					Int<300>,
					Int<3000>
				>
			>,
			AlphaL<
				RgbArg<EMITTER_COLOR_ARG,Rgb<255,255,255>>,
				Int<0>
			>,
			TrSparkX<
				RgbArg<EMITTER_COLOR_ARG,Rgb<255,255,255>>,
				Scale<
					NoisySoundLevel,
					Int<200>,
					Int<600>
				>,
				Int<250>,
				Int<0>
			>
		>
	>,
	AlphaL<
		RandomPerLEDFlickerL<
			RgbArg<EMITTER_COLOR_ARG,Rgb<255,255,255>>
		>,
		SmoothStep<
			Scale<
				NoisySoundLevel,
				IntArg<EMITTER_SIZE_ARG,2000>,
				Sum<
					IntArg<EMITTER_SIZE_ARG,2000>,
					Int<6000>
				>
			>,
			Int<-6000>
		>
	>,
	
	// Stab
	TransitionEffectL<
		TrConcat<
			TrJoin<
				TrDelayX<WavLen<>>,
				TrWipeIn<200>
			>,
			AlphaL<
				AudioFlickerL<STABCOLOR>,
				SmoothStep<
					IntArg<MELT_SIZE_ARG,28000>,
					Int<2000>
				>
			>,
			TrWipe<200>
		>,
		EFFECT_STAB
	>,
	
	// Clash
	TransitionEffectL<
		TrWaveX<
			RgbArg<CLASH_COLOR_ARG,Rgb<255,255,255>>,
			Scale<
				ClashImpactF<>,
				Int<100>,
				Int<400>
			>,
			Int<100>,
			Scale<
				ClashImpactF<>,
				Int<100>,
				Int<400>
			>,
			LockupScale
		>,
		EFFECT_CLASH
	>,
	
	// Lockup
	LockupTrL<
		AlphaMixL<
			Bump<
				Scale<
					BladeAngle<>,
					Scale<
						BladeAngle<0,16000>,
						Sum<
							IntArg<LOCKUP_POSITION_ARG,16000>,
							Int<-12000>
						>,
						Sum<
							IntArg<LOCKUP_POSITION_ARG,16000>,
							Int<10000>
						>
					>,
					Scale<
						SwingSpeed<100>,
						Int<14000>,
						Int<18000>
					>
				>
			>,
			AudioFlickerL<
				RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>
			>,
			BrownNoiseFlickerL<
				RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,
				Int<200>
			>
		>,
		TrConcat<
			TrInstant,
			RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,
			TrFade<400>
		>,
		TrConcat<
			TrInstant,
			RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,
			TrFade<400>
		>,
		SaberBase::LOCKUP_NORMAL
	>,
	
	// Lightning block
	ResponsiveLightningBlockL<
		Strobe<
			RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,
			AudioFlicker<
				RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,
				Blue
			>,
			50,
			1
		>,
		TrConcat<
			TrInstant,
			AlphaL<
				RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,
				Bump<
					Int<12000>,
					Int<18000>
				>
			>,
			TrFade<200>
		>,
		TrConcat<
			TrInstant,
			HumpFlickerL<
				AlphaL<
					RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,
					Int<16000>
				>,
				30
			>,
			TrSmoothFade<600>
		>
	>,
	
	// Drag
	LockupTrL<
		AlphaL<
			RandomPerLEDFlickerL<RgbArg<DRAG_COLOR_ARG,Rgb<255,14,0>>>,
			SmoothStep<
				IntArg<DRAG_SIZE_ARG,28000>,
				Int<3000>
			>
		>,
		TrConcat<
			TrJoin<
				TrDelay<4000>,
				TrWipeIn<200>
			>,
			AlphaL<
				BrownNoiseFlickerL<
					RgbArg<DRAG_COLOR_ARG,Rgb<255,14,0>>,
					Int<300>
				>,
				SmoothStep<
					IntArg<DRAG_SIZE_ARG,28000>,
					Int<3000>
				>
			>,
			TrFade<4000>
		>,
		TrFade<300>,
		SaberBase::LOCKUP_DRAG
	>,
	
	// Melt
	LockupTrL<
		AlphaL<
			Mix<
				TwistAngle<>,
				RgbArg<STAB_COLOR_ARG,Rgb<255,24,0>>,
				RotateColorsX<
					Int<3000>,
					RgbArg<STAB_COLOR_ARG,Rgb<255,24,0>>
				>
			>,
			SmoothStep<
				IntArg<MELT_SIZE_ARG,28000>,
				Int<4000>
			>
		>,
		TrConcat<
			TrWipeIn<100>,
			AlphaL<
				RgbArg<STAB_COLOR_ARG,Rgb<255,24,0>>,
				SmoothStep<
					IntArg<MELT_SIZE_ARG,28000>,
					Int<4000>
				>
			>,
			TrFade<300>
		>,
		TrWipe<200>,
		SaberBase::LOCKUP_MELT
	>,
	
	// In/Out
	InOutTrL<
		TrWipeX<IgnitionTime<300>>,
		TrWipeInX<RetractionTime<0>>,
		Black
	>,
	
	// Post Off
	TransitionEffectL<
		TrConcat<
			TrInstant,
			AlphaL<
				White,
				SmoothStep<
					IntArg<EMITTER_SIZE_ARG,2000>,
					Int<-4000>
				>
			>,
			TrFadeX<
				Mult<
					Scale<
						IsLessThan<
							WavLen<EFFECT_POSTOFF>,
							Int<200>
						>,
						WavLen<EFFECT_POSTOFF>,
						Int<4000>
					>,
					Int<10923>
				>
			>,
			AlphaL<
				Orange,
				SmoothStep<
					IntArg<EMITTER_SIZE_ARG,2000>,
					Int<-4000>
				>
			>,
			TrFadeX<
				Mult<
					Scale<
						IsLessThan<
							WavLen<EFFECT_POSTOFF>,
							Int<200>
						>,
						WavLen<EFFECT_POSTOFF>,
						Int<4000>
					>,
					Int<10923>
				>
			>,
			AlphaL<
				Red,
				SmoothStep<
					IntArg<EMITTER_SIZE_ARG,2000>,
					Int<-2000>
				>
			>,
			TrFadeX<
				Mult<
					Scale<
						IsLessThan<
							WavLen<EFFECT_POSTOFF>,
							Int<200>
						>,
						WavLen<EFFECT_POSTOFF>,
						Int<4000>
					>,
					Int<10923>
				>
			>
		>,
		EFFECT_POSTOFF
	>,

	// Battery Monitor on Boot
	BatteryLevelOnBoot,

	// Battery level on font change
	BatteryLevelOnFontChange,

	// Battery level
	BatteryLevelOnDemand
>;
/*
Add to preset as StylePtr<MainAudioFlickerSingleColor75%OrangeRed>()
--------------------------------------------------------------------------*/

// Assasin
/*
	StylePtr<Layers<
	HumpFlicker<RotateColorsX<Variation,Green>,RotateColorsX<Variation,Rgb<0,128,0>>,50>,
	AlphaL<Stripes<2500,-2750,RotateColorsX<Variation,Green>,RotateColorsX<Variation,Rgb<25,60,0>>,Pulsing<RotateColorsX<Variation,Rgb<0,30,0>>,Black,800>>,SwingSpeed<375>>,
	LockupTrL<Layers<
	AlphaL<AudioFlickerL<Rgb<255,240,80>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,
	AlphaL<LemonChiffon,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,White,TrFade<400>>,SaberBase::LOCKUP_NORMAL>,
	ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,
	AlphaL<RotateColorsX<Variation,Rgb16<21301,65535,0>>,SmoothStep<Scale<SlowNoise<Int<2500>>,Int<1000>,Int<3000>>,Int<-4000>>>,
	ResponsiveStabL<Red>,
	EffectSequence<EFFECT_BLAST,TransitionEffectL<TrConcat<TrInstant,AlphaL<White,BlastF<200,200>>,TrFade<300>>,EFFECT_BLAST>,ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,ResponsiveBlastWaveL<White,Scale<SwingSpeed<400>,Int<500>,Int<200>>,Scale<SwingSpeed<400>,Int<100>,Int<400>>>,ResponsiveBlastFadeL<White,Scale<SwingSpeed<400>,Int<6000>,Int<12000>>,Scale<SwingSpeed<400>,Int<400>,Int<100>>>,ResponsiveBlastL<White,Scale<SwingSpeed<400>,Int<400>,Int<100>>,Scale<SwingSpeed<400>,Int<200>,Int<100>>,Scale<SwingSpeed<400>,Int<400>,Int<200>>>>,
	ResponsiveClashL<TransitionEffect<Rgb<255,240,80>,LemonChiffon,TrInstant,TrFade<100>,EFFECT_CLASH>,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,
	TransitionEffectL<TrConcat<TrInstant,Stripes<3000,-3500,RotateColorsX<Variation,Rgb16<38402,65535,3934>>,RandomPerLEDFlicker<Rgb<60,60,60>,Black>,BrownNoiseFlicker<RotateColorsX<Variation,Rgb16<38402,65535,3934>>,Rgb<30,30,30>,200>,RandomPerLEDFlicker<Rgb<80,80,80>,Rgb<30,30,30>>>,TrFade<500>>,EFFECT_IGNITION>,
	TransitionEffectL<TrConcat<TrInstant,AudioFlickerL<RotateColorsX<Variation,Rgb16<54757,65535,0>>>,TrFade<1000>>,EFFECT_RETRACTION>,
	LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,
	LockupTrL<AlphaL<Mix<TwistAngle<>,Red,Orange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,
	EffectSequence<EFFECT_POWERSAVE,AlphaL<Black,Int<8192>>,AlphaL<Black,Int<16384>>,AlphaL<Black,Int<24576>>,AlphaL<Black,Int<0>>>,
	InOutTrL<TrWipeSparkTip<White,250>,TrWipeInSparkTip<White,656>>,
	TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrDelay<2000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrFade<1000>>,EFFECT_BATTERY_LEVEL>>>
	*/


// Seethe
/*
	StylePtr<Layers<
	AudioFlicker<RotateColorsX<Variation,Red>,RotateColorsX<Variation,Rgb<200,0,0>>>,
	//Red audioflicker
	TransitionEffectL<TrConcat<TrFade<200>,AlphaL<RotateColorsX<Variation,Rgb16<65535,11439,0>>,SwingSpeed<500>>,TrDelay<30000>,AlphaL<RotateColorsX<Variation,Rgb16<65535,11439,0>>,SwingSpeed<500>>,TrFade<800>>,EFFECT_FORCE>,
	//Force effect, temporarily allows a swing effect where solid dark orange takes over the blade when swinging
	AlphaL<BrownNoiseFlicker<RotateColorsX<Variation,Red>,Black,300>,SwingSpeed<315>>,
	//Unstable swing
	LockupTrL<Layers<
	AlphaL<AudioFlickerL<Rgb<255,225,0>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,
	AlphaL<NavajoWhite,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,AlphaL<White,Int<0>>,TrWaveX<White,Int<300>,Int<100>,Int<400>,Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>>>,SaberBase::LOCKUP_NORMAL>,
	//Responsive lockup
	ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,
	//Responsive lightning block
	Mix<Sin<Int<8>>,AlphaL<RotateColorsX<Variation,Rgb16<65535,11439,0>>,Bump<Int<0>,Int<6000>>>,AlphaL<RotateColorsX<Variation,Rgb16<65535,11439,0>>,Bump<Int<0>,Int<22000>>>>,
	//Timed "breathing" emitter flare - NOTE: Due to the way Proffie works, this isn't always "lined up" and might be slightly ahead or slightly behind the hum's breathing. To fix you can turn the saber off and back on until it's lined up. The timing is right, but the code runs in the background even after turning the saber off so it doesn't always start "on time."
	//AlphaL<RotateColorsX<Variation,Rgb16<65535,11439,0>>,Bump<Int<0>,Scale<TwistAngle<>,Int<3000>,Int<20000>>>>,
	//Alternate twist responsive "breathing" emitter flare, twist the hilt in time with the breathing in a meditative way, or time it while going through different stances, etc.
	ResponsiveStabL<Orange>,
	//Responsive stab
	EffectSequence<EFFECT_BLAST,ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,LocalizedClashL<White,80,30,EFFECT_BLAST>,ResponsiveBlastWaveL<White,Scale<SwingSpeed<400>,Int<500>,Int<200>>,Scale<SwingSpeed<400>,Int<100>,Int<400>>>,BlastL<White,200,200>,ResponsiveBlastFadeL<White,Scale<SwingSpeed<400>,Int<6000>,Int<12000>>,Scale<SwingSpeed<400>,Int<400>,Int<100>>>,ResponsiveBlastL<White,Scale<SwingSpeed<400>,Int<400>,Int<100>>,Scale<SwingSpeed<400>,Int<200>,Int<100>>,Scale<SwingSpeed<400>,Int<400>,Int<200>>>>,
	//Multi-blast, blaster reflect cycles through different responsive effects
	ResponsiveClashL<TransitionEffect<Rgb<255,240,80>,LemonChiffon,TrInstant,TrFade<100>,EFFECT_CLASH>,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,
	//Responsive clash
	LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,
	//Drag
	LockupTrL<AlphaL<Mix<TwistAngle<>,Rgb<255,200,0>,DarkOrange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,
	//Responsive melt
	EffectSequence<EFFECT_POWERSAVE,AlphaL<Black,Int<8192>>,AlphaL<Black,Int<16384>>,AlphaL<Black,Int<24576>>,AlphaL<Black,Int<0>>>,
	//Power save, if using fett263's prop file hold Aux and click PWR while ON (pointing up) to dim blade in 25% increments.
	InOutTrL<TrWipe<2650>,TrWipeIn<1375>>,
	//Wipe out ignition, wipe in retraction
	//TransitionEffectL<TrConcat<TrDelay<1500>,Black,TrFade<1000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_BOOT>,
	//TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_NEWFONT>,
	//Optional/alternate passive battery monitor, on boot (1st line) or font change (2nd line) you will get a visual indicator at the emitter of your current battery level. This also works without a blade if you have a lit emitter or blade plug. Green is Full, Red is Low (the color will blend from Green to Red as the battery is depleted), the indicator will fade out after 3000 ms and not display again until powered down and back up or fonts change.
	TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrDelay<2000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrFade<1000>>,EFFECT_BATTERY_LEVEL>
	//On demand battery level, if using fett263's prop file Hold AUX and click PWR while OFF, the battery level is represented by the location on the blade; tip = full, hilt = low and color; green = full, yellow = half, red = low
	>> */


/*
// Exalted blade style.
{ "EXALTED;common", "tracks/JFO11.wav",
	StylePtr<Layers<
	Mix<SwingSpeed<400>,StyleFire<BrownNoiseFlicker<RotateColorsX<Variation,Red>,RandomPerLEDFlicker<RotateColorsX<Variation,Red>,RotateColorsX<Variation,Rgb<60,0,0>>>,300>,RotateColorsX<Variation,Rgb<80,0,0>>,0,6,FireConfig<10,1000,2>,FireConfig<10,1000,2>,FireConfig<10,1000,2>,FireConfig<10,1000,2>>,AudioFlicker<RotateColorsX<Variation,Rgb16<65535,8357,0>>,RotateColorsX<Variation,Rgb16<42307,1982,0>>>>,
	//Unstable red with blood orange audioflicker swing effects
	AlphaL<Stripes<2500,-3000,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Rgb<60,0,0>>,Pulsing<RotateColorsX<Variation,Rgb<30,0,0>>,Black,800>>,Scale<IsLessThan<SwingSpeed<600>,Int<13600>>,Scale<SwingSpeed<600>,Int<-19300>,Int<32768>>,Int<0>>>,
	//Hard swings cause red to ripple up the blade
	LockupTrL<Layers<
	AlphaL<AudioFlickerL<Rgb<255,225,0>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,
	AlphaL<NavajoWhite,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,AlphaL<White,Int<0>>,TrWaveX<White,Int<300>,Int<100>,Int<400>,Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>>>,SaberBase::LOCKUP_NORMAL>,
	//Responsive lockup
	ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,
	//Responsive lightning block
	AlphaL<RotateColorsX<Variation,Rgb16<65535,11439,0>>,SmoothStep<Scale<SlowNoise<Int<3000>>,Int<2000>,Int<3500>>,Int<-3000>>>,
	//Sparking emitter flare
	ResponsiveStabL<Orange>,
	//Responsive stab
	EffectSequence<EFFECT_BLAST,ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,LocalizedClashL<White,80,30,EFFECT_BLAST>,ResponsiveBlastWaveL<White,Scale<SwingSpeed<400>,Int<500>,Int<200>>,Scale<SwingSpeed<400>,Int<100>,Int<400>>>,BlastL<White,200,200>,ResponsiveBlastFadeL<White,Scale<SwingSpeed<400>,Int<6000>,Int<12000>>,Scale<SwingSpeed<400>,Int<400>,Int<100>>>,ResponsiveBlastL<White,Scale<SwingSpeed<400>,Int<400>,Int<100>>,Scale<SwingSpeed<400>,Int<200>,Int<100>>,Scale<SwingSpeed<400>,Int<400>,Int<200>>>>,
	//Multi-blast, blaster reflect cycles through different responsive effects
	ResponsiveClashL<White,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,
	//Responsive clash
	TransitionEffectL<TrConcat<TrInstant,Stripes<3000,-3500,RotateColorsX<Variation,Rgb16<65535,8357,0>>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<60,0,0>>,Black>,BrownNoiseFlicker<RotateColorsX<Variation,Orange>,RotateColorsX<Variation,Rgb<60,0,0>>,200>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<128,0,0>>,RotateColorsX<Variation,Rgb<60,0,0>>>>,TrFade<1200>>,EFFECT_IGNITION>,
	//Unstable fiery ignition effect
	LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,
	//Drag
	LockupTrL<AlphaL<Mix<TwistAngle<>,Rgb<255,200,0>,DarkOrange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,
	//Responsive melt
	EffectSequence<EFFECT_POWERSAVE,AlphaL<Black,Int<8192>>,AlphaL<Black,Int<16384>>,AlphaL<Black,Int<24576>>,AlphaL<Black,Int<0>>>,
	//Power save, if using fett263's prop file hold Aux and click PWR while ON (pointing up) to dim blade in 25% increments.
	InOutTrL<TrWipeSparkTip<White,250>,TrColorCycle<1450>,Black>,
	//Spark tip ignition, cycle down retraction
	//TransitionEffectL<TrConcat<TrDelay<1500>,Black,TrFade<1000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_BOOT>,
	//TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_NEWFONT>,
	//Optional/alternate passive battery monitor, on boot (1st line) or font change (2nd line) you will get a visual indicator at the emitter of your current battery level. This also works without a blade if you have a lit emitter or blade plug. Green is Full, Red is Low (the color will blend from Green to Red as the battery is depleted), the indicator will fade out after 3000 ms and not display again until powered down and back up or fonts change.
	TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrDelay<2000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrFade<1000>>,EFFECT_BATTERY_LEVEL>
	//On demand battery level, if using fett263's prop file Hold AUX and click PWR while OFF, the battery level is represented by the location on the blade; tip = full, hilt = low and color; green = full, yellow = half, red = low
	//,TransitionEffectL<TrConcat<TrFade<100>,AlphaL<Pulsing<Rgb<120,120,165>,Rgb<50,50,80>,500>,Bump<Int<0>,Int<6000>>>,TrBoing<600,9>>,EFFECT_PREON>
	//Optional Clickity Preon, I recommend using Analog's preon :) Make sure to leave the comma at the beginning in if you're using the on demand battery level
	>>() //, "exhalted" 
},
// */

/*
// Party blade style.
{ "party;common", "tracks/meco.wav",
   // StylePtr<Layers<StyleFire<Gradient<RotateColorsX<Variation,Red>,RotateColorsX<Variation,Orange>,RotateColorsX<Variation,Yellow>,RotateColorsX<Variation,Green>,RotateColorsX<Variation,Cyan>,RotateColorsX<Variation,Blue>,RotateColorsX<Variation,Magenta>>,Red,0,3,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>>,TransitionEffectL<TrConcat<TrInstant,BrownNoiseFlickerL<AlphaL<White,Int<16000>>,Int<50>>,TrSmoothFade<600>>,EFFECT_LOCKUP_END>,ResponsiveLockupL<Strobe<White,BrownNoiseFlicker<White,Red,300>,50,1>,TrConcat<TrInstant,White,TrFade<400>>,TrFade<100>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Scale<SwingSpeed<100>,Int<10000>,Int<14000>>>,ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,ResponsiveStabL<Red,TrWipeIn<600>,TrWipe<600>>,ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,ResponsiveClashL<White,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,LockupTrL<AlphaL<Mix<TwistAngle<>,Red,Orange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,InOutTrL<TrWipe<300>,TrWipeIn<500>,Black>,TransitionEffectL<TrConcat<TrDelay<1500>,Black,TrFade<1000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_BOOT>,TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_NEWFONT>>>(),"party"},
	StylePtr<Layers<StyleFire<StripesX<Int<3000>,Scale<TwistAngle<>,Int<-500>,Int<0>>,Red,Orange,Yellow,Green,Blue,Magenta>,StripesX<Int<3000>,Scale<TwistAngle<>,Int<-500>,Int<0>>,Tomato,OrangeRed,Orange,Yellow,SteelBlue,DeepPink>,0,3,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>>,LockupTrL<Layers<AlphaL<AudioFlickerL<White>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,AlphaL<White,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,White,TrFade<400>>,SaberBase::LOCKUP_NORMAL>,ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,ResponsiveStabL<Red,TrWipeIn<600>,TrWipe<600>>,ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,ResponsiveClashL<White,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,TransitionEffectL<TrConcat<TrInstant,AudioFlickerL<RotateColorsX<Variation,White>>,TrFade<1200>>,EFFECT_RETRACTION>,LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,LockupTrL<AlphaL<Mix<TwistAngle<>,Red,Orange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,InOutTrL<TrWipeSparkTip<White,300>,TrWipeInSparkTip<White,500>,Black>,TransitionEffectL<TrConcat<TrInstant,AlphaL<White,Bump<Int<0>,Int<10000>>>,TrFade<3000>,AlphaL<Orange,Bump<Int<0>,Int<8000>>>,TrFade<3000>,AlphaL<Red,Bump<Int<0>,Int<6000>>>,TrFade<2000>>,EFFECT_RETRACTION>,TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrDelay<2000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrFade<1000>>,EFFECT_BATTERY_LEVEL>>>
	() //, "party" 
},
*/

// Mother
	StylePtr <
		Layers <
			// On effects
			StripesX <
				Sin<
					Int<12>,
					Int<3000>,
					Int<7000>
				>,
				Scale<
					SwingSpeed<100>,
					Int<75>,
					Int<125>
				>,
				StripesX <
					Sin<
						Int<10>,
						Int<1000>,
						Int<3000>
					>,
					Scale<
						SwingSpeed<100>,
						Int<75>,
						Int<100>
					>,
					Pulsing<
						RotateColorsX<Variation, Green>,
						RotateColorsX<Variation, Rgb<0,20,0>>,
						1200
					>,
					Mix<
						SwingSpeed<200>,
						RotateColorsX<Variation, Rgb<0,120,0>>,
						Black
					>
				>,
				RotateColorsX<Variation, Rgb<0,60,0>>,
				Pulsing<
					RotateColorsX<Variation, Rgb<0,50,0>>,
					StripesX<
						Sin<
							Int<10>,
							Int<2000>,
							Int<3000>
						>,
						Sin<
							Int<10>,
							Int<75>,
							Int<100>
						>,
						RotateColorsX<Variation, Green>,
						RotateColorsX<Variation, Rgb<0,96,0>>
					>,
					2000
				>,
				Pulsing<
					RotateColorsX<Variation, Rgb<0,128,0>>,
					RotateColorsX<Variation,Rgb<0,5,0>>,
					3000
				>
			>,
			AlphaL<
				StyleFire<
					RotateColorsX<Variation, Green>,
					RotateColorsX<Variation, Rgb<0,2,0>>,
					0,
					1,
					FireConfig<10, 2000, 2>,
					FireConfig<10, 2000, 2>,
					FireConfig<10, 2000, 2>,
					FireConfig<0, 0, 25>
				>,
				Int<10000>
			>,

			// Lockup
			ResponsiveLockupL < 
		//	LockupTrL <
				Layers <
					AlphaL<
						AudioFlickerL<White>,
						Bump<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0, 16000>,
									Int<4000>,
									Int<26000>
								>,
								Int<6000>
							>,
							Scale<
								SwingSpeed<100>,
								Int<14000>,
								Int<18000>
							>
						>
					>,
					AlphaL<
						White,
						Bump<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0, 16000>,
									Int<4000>,
									Int<26000>
								>,
								Int<6000>
							>,
							Int<10000>
						>
					>
				>,
				TrConcat<
					TrInstant,
					White,
					TrFade<400>
				>,
				TrConcat<
					TrInstant,
					White,
					TrFade<400>
				>
			//	SaberBase::LOCKUP_NORMAL
			>,

			//Lightning Block
			ResponsiveLightningBlockL <
				Strobe<
					White,
					AudioFlicker<White, Blue>,
					50,
					1
				>,
				TrConcat<
					TrInstant,
					AlphaL<
						White,
						Bump<
							Int<12000>,
							Int<18000>
						>
					>,
					TrFade<200>
				>,
				TrConcat<
					TrInstant,
					HumpFlickerL<
						AlphaL<
							White,
							Int<16000>
						>,
						30
					>,
					TrSmoothFade<600>
				>
			>,

			// Stab
			ResponsiveStabL<
				Red,
				TrWipeIn<600>,
				TrWipe<600>
			>,

			// Blaster bolt
			/*
			ResponsiveBlastFadeL<
				White,
				Scale<
					SwingSpeed<200>,
					Int<8000>,
					Int<16000>
				>,
				Int<400>
			>,
			*/
			EffectSequence<
				EFFECT_BLAST,
				ResponsiveBlastL<
					Rgb<200, 255, 200>,
					Int<400>,
					Scale<
						SwingSpeed<200>,
						Int<100>,
						Int<400>
					>,
					Int<400>
				>,
				LocalizedClashL<
					Rgb<200, 255, 200>,
					80,
					30,
					EFFECT_BLAST
				>,
				ResponsiveBlastWaveL<
					Rgb<200, 255, 200>,
					Scale<
						SwingSpeed<400>,
						Int<500>,
						Int<200>
					>,
					Scale<
						SwingSpeed<400>,
						Int<100>,
						Int<400>
					>
				>,
				BlastL<
					Rgb<200, 255, 200>,
					200,
					200
				>,
				ResponsiveBlastFadeL<
					Rgb<200, 255, 200>,
					Scale<
						SwingSpeed<400>,
						Int<6000>,
						Int<12000>
					>,
					Scale<
						SwingSpeed<400>,
						Int<400>,
						Int<100>
					>
				>,
				ResponsiveBlastL<
					Rgb<200, 255, 200>,
					Scale<
						SwingSpeed<400>,
						Int<400>,
						Int<100>
					>,
					Scale<
						SwingSpeed<400>,
						Int<200>,
						Int<100>
					>,
					Scale<
						SwingSpeed<400>,
						Int<400>,
						Int<200>
					>
				>
			>,

			// Clash
			ResponsiveClashL<
				White,
				TrInstant,
				TrFade<400>,
				Scale<
					BladeAngle<0, 16000>,
					Int<4000>,
					Int<26000>
				>,
				Int<6000>,
				Int<20000>
			>,

			// Lockup Tip Drag
			ResponsiveDragL <
			//LockupTrL<
				AlphaL<
					BrownNoiseFlickerL<
						White,
						Int<300>
					>,
					SmoothStep<
						Int<30000>,
						Int<5000>
					>
				>,
				TrWipeIn<400>,
				TrFade<300>
				//SaberBase::LOCKUP_DRAG
			>,

			// Lockup Melt
			ResponsiveMeltL <
			//LockupTrL<
				AlphaL<
					Mix<
						TwistAngle<>,
						Red,
						Orange
					>,
					SmoothStep<
						Int<28000>,
						Int<5000>
					>
				>,
				TrWipeIn<600>,
				TrFade<300>
				//SaberBase::LOCKUP_MELT
			>,

			// In/Out Effect
			InOutTrL<
				TrWipeSparkTip<
					AlphaL<
						Rgb<127, 200, 127>, 
						BladeAngle<>
					>,
					300
				>,
				TrWipeInSparkTipX<
					AlphaL<
						Rgb<15, 127, 15>, 
						BladeAngle<>
					>,
					RetractionTime<0>
				>,
				Black
			>,

			// PreOn effect
			/*
			TransitionEffectL<
				TrConcat<
				//	TrWipe<300>,
					TrFade<2000>,
					AlphaL<
						HumpFlickerL<Red, 10>,
						Bump<
							Int<0>,
							Int<6000>
						>
					>,
					TrFade<2950>,
					AlphaL<
						HumpFlickerL<Orange, 15>,
						Bump<
							Int<0>, 
							Int<10000>
						>
					>,
					TrFade<3000>,
					AlphaL<
						HumpFlickerL<Green, 20>,
						Bump<
							Int<0>, 
							Int<20000>
						>
					>,
					TrBoing<1000,3>
				>,
				EFFECT_PREON
			>,
			*/

			TransitionEffectL<
				TrConcat<
					TrInstant,
					Black,
					TrWipeX<
						WavLen<EFFECT_PREON>
					>,
					Mix<
						NoisySoundLevel,
						Rgb<0, 31, 0>,
						AlphaL <
							AudioFlicker<
								RotateColorsX<Variation, Rgb<0,31,0>>,
								RotateColorsX<Variation, Rgb<0,15,0>>
							>,
							Int<100>
						>
					>,
					TrInstant
			//		TrDelayX<
			//			WavLen<EFFECT_PREON>
			//		>
			//		AlphaL<
			//			RotateColorsX<Variation, Rgb<0, 63, 0>>,
			//			SmoothStep<
			//				Int<28000>,
			//				Int<5000>
			//			>
			//		>
					/*
					AlphaL<
						HumpFlickerL<
							RotateColorsX<Variation, Green>, 
							10
						>, 
						Bump<
							Int<0>, 
							Int<10000>
						>
					>, 
					TrFade<350>, 
					AlphaL<
						HumpFlickerL<
							RotateColorsX<Variation, Green>, 
							15
						>, 
						Bump<
							Int<0>, 
							Int<6000>
						>
					>, 
					TrFade<450>, 
					AlphaL<
						HumpFlickerL<
							RotateColorsX<Variation, Green>, 
							20
						>, 
						Bump<
							Int<0>, 
							Int<8000>
						>
					>, 
					TrFade<500>, 
					AlphaL<
						HumpFlickerL<
							RotateColorsX<Variation, Green>,
							25
						>, 
						Bump<
							Int<0>, 
							Int<14500>
						>
					>, 
					TrBoing<150, 1>,
					TrDelayX<
						WavLen<EFFECT_PREON>
					>
					*/
				>,
				EFFECT_PREON
			>,

			// Ignition effect
			TransitionEffectL<
				TrConcat<
					TrInstant, 
					AlphaL <
						AudioFlicker<
							RotateColorsX<Variation, Rgb<0, 63, 0>>, 
							RotateColorsX<Variation, Rgb<0, 31, 0>>
						>,
						Int<16384> //50%
					>,
					TrExtendX<
						Int<500>,
						TrWipe<500>
					>,
					AlphaL <
						Stripes<
							3000, 
							-3500, 
							Rgb<63, 200, 63>, 
							RandomPerLEDFlicker<
								Rgb<0, 63, 0>, 
								Black
							>, 
							BrownNoiseFlicker<
								Rgb<63, 255, 63>, 
								Rgb<0, 30, 0>, 
								200
							>, 
							RandomPerLEDFlicker<
								Rgb<31, 80, 31>, 
								Rgb<0, 30, 0>
							>
						>,
						NoisySoundLevel
					>, 
					TrFade<1500>
				>, 
				EFFECT_IGNITION
			>,

			// Retraction effect
			TransitionEffectL <
				TrConcat <
					TrInstant,
					TrWipeInX< RetractionTime<0>>,
					AlphaL<
						Style1_SmokeBlade,	//Green,
						Bump<
							Int<0>,
							Int<16000>
						>
					>,
					TrFade<2000>,
					AlphaL<
						Rgb<0, 63, 0>,
						Bump<
							Int<0>,
							Int<14000>
						>
					>,
					TrFade<1500>,
					AlphaL<
						Orange,
						Bump<
							Int<0>,
							Int<8000>
						>
					>,
					TrFade<1000>,
					AlphaL<
						Red,
						Bump<
							Int<0>,
							Int<6000>
						>
					>,
					TrFade<500>
				> ,
				EFFECT_RETRACTION
			>,

			// Battery Monitor on Boot
			BatteryLevelOnBoot,

			// Battery level on font change
			BatteryLevelOnFontChange,

			// Battery level
			BatteryLevelOnDemand

		>
	>


// Mercenary
/*
   StylePtr < Layers<

	//Base Fett263 Smoke Blade style
	StripesX<Sin<Int<12>,Int<3000>,Int<7000>>,Scale<SwingSpeed<100>,Int<75>,Int<125>>,StripesX<Sin<Int<10>,Int<1000>,Int<3000>>,Scale<SwingSpeed<100>,Int<75>,Int<100>>,Pulsing<RotateColorsX<Variation,Yellow>,RotateColorsX<Variation,Rgb<15,14,0>>,1200>,Mix<SwingSpeed<200>,RotateColorsX<Variation,Rgb<90,87,0>>,Black>>,RotateColorsX<Variation,Rgb<40,40,0>>,Pulsing<RotateColorsX<Variation,Rgb<36,33,0>>,StripesX<Sin<Int<10>,Int<2000>,Int<3000>>,Sin<Int<10>,Int<75>,Int<100>>,RotateColorsX<Variation,Yellow>,RotateColorsX<Variation,Rgb<60,58,0>>>,2000>,Pulsing<RotateColorsX<Variation,Rgb<90,88,0>>,RotateColorsX<Variation,Rgb<5,5,0>>,3000>>,

	//Underlying Fett263 Smoke Blade Fire layer
	AlphaL<StyleFire<RotateColorsX<Variation,Yellow>,RotateColorsX<Variation,Rgb<2,2,0>>,0,1,FireConfig<10,2000,2>,FireConfig<10,2000,2>,FireConfig<10,2000,2>,FireConfig<0,0,25>>,Int<10000>>,

	//Fett263 Ripple swing effect
	AlphaL<Stripes<2500,-3000,RotateColorsX<Variation,Yellow>,RotateColorsX<Variation,Rgb<44,42,0>>,Pulsing<RotateColorsX<Variation,Rgb<22,20,0>>,Black,800>>,SwingSpeed<375>>,

	//Fett263 Bright hard swing effect
	AlphaL<RotateColorsX<Variation,LemonChiffon>,Scale<IsLessThan<SwingSpeed<675>,Int<13600>>,Scale<SwingSpeed<750>,Int<-17300>,Int<32768>>,Int<0>>>,

	//Fett263 Responsive Intensity Lockup
	LockupTrL<AlphaMixL<Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-10000>>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>,BrownNoiseFlickerL<RgbArg<LOCKUP_COLOR_ARG,White>,Int<200>>,StripesX<Int<1800>,Scale<NoisySoundLevel,Int<-3500>,Int<-5000>>,Mix<Int<6425>,Black,RgbArg<LOCKUP_COLOR_ARG,White>>,RgbArg<LOCKUP_COLOR_ARG,White>,Mix<Int<12850>,Black,RgbArg<LOCKUP_COLOR_ARG,White>>>>,
	TrConcat<TrExtend<50,TrInstant>,Mix<IsLessThan<ClashImpactF<>,Int<26000>>,RgbArg<LOCKUP_COLOR_ARG,White>,AlphaL<RgbArg<LOCKUP_COLOR_ARG,White>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-10000>>>,Scale<ClashImpactF<>,Int<20000>,Int<60000>>>>>,TrExtend<3000,TrFade<300>>,AlphaL<AudioFlicker<RgbArg<LOCKUP_COLOR_ARG,White>,Mix<Int<10280>,Black,RgbArg<LOCKUP_COLOR_ARG,White>>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-10000>>>,Int<13000>>>,TrFade<3000>>,
	TrConcat<TrInstant,AlphaL<RgbArg<LOCKUP_COLOR_ARG,White>,Int<0>>,TrWaveX<RgbArg<LOCKUP_COLOR_ARG,White>,Int<300>,Int<100>,Int<400>,Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>>,SaberBase::LOCKUP_NORMAL>,

	//Fett263 Responsive Lightning Block
	ResponsiveLightningBlockL<Strobe<RgbArg<LB_COLOR_ARG,White>,AudioFlicker<RgbArg<LB_COLOR_ARG,White>,Blue>,50,1>,TrConcat<TrInstant,AlphaL<RgbArg<LB_COLOR_ARG,White>,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<RgbArg<LB_COLOR_ARG,White>,Int<16000>>,30>,TrSmoothFade<600>>>,

	//Fett263 Sparking Emitter Flare
	AlphaL<RotateColorsX<Variation,LemonChiffon>,SmoothStep<Scale<SlowNoise<Int<2750>>,Int<1750>,Int<3750>>,Int<-4000>>>,

	//Responsive Stab
	ResponsiveStabL<AudioFlickerL<RgbArg<STAB_COLOR_ARG,DeepPink>>,TrWipeInX<Percentage<WavLen<EFFECT_STAB>,50>>,TrFadeX<Percentage<WavLen<EFFECT_STAB>,50>>>,

	//Fett263 Multi-blast, blaster reflect cycles through different responsive effects
	EffectSequence<EFFECT_BLAST,ResponsiveBlastL<RgbArg<BLAST_COLOR_ARG,White>,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,LocalizedClashL<RgbArg<BLAST_COLOR_ARG,White>,80,30,EFFECT_BLAST>,ResponsiveBlastWaveL<RgbArg<BLAST_COLOR_ARG,White>,Scale<SwingSpeed<400>,Int<500>,Int<200>>,Scale<SwingSpeed<400>,Int<100>,Int<400>>>,BlastL<RgbArg<BLAST_COLOR_ARG,White>,200,200>,ResponsiveBlastFadeL<RgbArg<BLAST_COLOR_ARG,White>,Scale<SwingSpeed<400>,Int<6000>,Int<12000>>,Scale<SwingSpeed<400>,Int<400>,Int<100>>>,ResponsiveBlastL<RgbArg<BLAST_COLOR_ARG,White>,Scale<SwingSpeed<400>,Int<400>,Int<100>>,Scale<SwingSpeed<400>,Int<200>,Int<100>>,Scale<SwingSpeed<400>,Int<400>,Int<200>>>>,

	//Fett263 Real Clash
	Mix<IsLessThan<ClashImpactF<>,Int<26000>>,TransitionEffectL<TrConcat<TrInstant,AlphaL<RgbArg<CLASH_COLOR_ARG,White>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-10000>>>,Scale<ClashImpactF<>,Int<12000>,Int<60000>>>>,TrFadeX<Scale<ClashImpactF<>,Int<200>,Int<400>>>>,EFFECT_CLASH>,TransitionEffectL<TrWaveX<RgbArg<CLASH_COLOR_ARG,White>,Scale<ClashImpactF<>,Int<100>,Int<400>>,Int<100>,Scale<ClashImpactF<>,Int<100>,Int<400>>,Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-10000>>>>,EFFECT_CLASH>>,

	//Fett263 Unstable bright ignition effect
	TransitionEffectL<TrConcat<TrInstant,Stripes<3000,-3500,RotateColorsX<Variation,Rgb<100,100,150>>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<60,60,80>>,Black>,BrownNoiseFlicker<RotateColorsX<Variation,Rgb<110,115,140>>,RotateColorsX<Variation,Rgb<60,60,80>>,200>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<128,128,128>>,RotateColorsX<Variation,Rgb<60,60,80>>>>,TrFadeX<Percentage<WavLen<>,65>>>,EFFECT_IGNITION>,

	//Fett263 Bright Humpflicker retraction effect
	TransitionEffectL<TrConcat<TrInstant,HumpFlickerL<White,40>,TrFadeX<Percentage<WavLen<>,125>>>,EFFECT_RETRACTION>,

	//Fett263 Intensity Drag
	LockupTrL<AlphaL<RandomPerLEDFlickerL<RgbArg<DRAG_COLOR_ARG,White>>,SmoothStep<IntArg<DRAG_SIZE_ARG,27500>,Int<5000>>>,TrConcat<TrExtend<4000,TrWipeIn<200>>,AlphaL<BrownNoiseFlickerL<RgbArg<DRAG_COLOR_ARG,White>,Int<300>>,SmoothStep<IntArg<DRAG_SIZE_ARG,29250>,Int<5000>>>,TrFade<4000>>,TrFade<300>,SaberBase::LOCKUP_DRAG>,

	//Fett263 Responsive Intensity Melt
	LockupTrL<AlphaL<Remap<Scale<RampF,Int<65536>,Int<0>>,StaticFire<Mix<TwistAngle<>,OrangeRed,DarkOrange>,Mix<TwistAngle<>,OrangeRed,Orange>,0,3,5,3000,10>>,SmoothStep<IntArg<MELT_SIZE_ARG,26000>,Int<6000>>>,TrConcat<TrWipeIn<100>,AlphaL<Red,SmoothStep<Int<29000>,Int<8000>>>,TrExtend<2000,TrFade<300>>,AlphaL<Mix<TwistAngle<>,Red,Orange>,SmoothStep<Int<29000>,Int<8000>>>,TrFade<3000>>,TrFade<250>,SaberBase::LOCKUP_MELT>,

	//Fett263 Power Save, if using Fett263's prop file hold AUX and click PWR while ON (pointing up) to dim blade in 25% increments.
	EffectSequence<EFFECT_POWERSAVE,AlphaL<Black,Int<8192>>,AlphaL<Black,Int<16384>>,AlphaL<Black,Int<24576>>,AlphaL<Black,Int<0>>>,

	//Fett263 White Spark Tip ignition and Color Cycle retraction
	InOutTrL<TrJoin<TrWipeX<Percentage<WavLen<EFFECT_IGNITION>,8>>,TrWaveX<White,Percentage<WavLen<EFFECT_IGNITION>,25>,Int<300>,Percentage<WavLen<EFFECT_IGNITION>,8>,Int<0>>>,TrColorCycle<950,7500>>,

	//Fett263 optional/alternate Passive Battery Monitor: on boot (1st line) or font change (2nd line) you will get a visual indicator at the emitter of your current battery level. This also works without a blade if you have a lit emitter or blade plug. Green is Full, Red is Low (the color will blend from Green to Red as the battery is depleted), the indicator will fade out after 3000 ms and not display again until powered down and back up or fonts change.
	//TransitionEffectL<TrConcat<TrDelay<1500>,Black,TrFade<1000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_BOOT>,
	//TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_NEWFONT>,

	//Fett263 On-Demand Battery Level: if using Fett263's prop file Hold AUX and click PWR while OFF, the battery level is represented by the location on the blade; tip = full, hilt = low and color; green = full, yellow = half, red = low
	TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrDelay<2000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrFade<1000>>,EFFECT_BATTERY_LEVEL>,

	//Absorby charge-up preon
	TransitionEffectL<TrConcat<TrDelayX<Percentage<WavLen<>,33>>,TransitionLoopL<TrJoin<TrWipeIn<142>,TrSparkX<RotateColorsX<Variation,LemonChiffon>,Int<425>,Int<142>,Int<32768>>>>,TrDelayX<Percentage<WavLen<>,67>>>,EFFECT_PREON>,
	TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<Trigger<EFFECT_PREON,Percentage<WavLen<>,33>,Percentage<WavLen<>,67>,Int<0>>,BrownNoiseFlicker<Black,RotateColorsX<Variation,HotPink>,100>,RandomPerLEDFlicker<RotateColorsX<Variation,LightPink>,RotateColorsX<Variation,LemonChiffon>>,BrownNoiseFlicker<Mix<NoisySoundLevel,RotateColorsX<Variation,DeepPink>,RotateColorsX<Int<4000>,RotateColorsX<Variation,Yellow>>>,RotateColorsX<Variation,LemonChiffon>,50>>,SmoothStep<Scale<NoisySoundLevel,Int<-350>,Int<17500>>,Int<-4000>>>,TrDelayX<WavLen<>>>,EFFECT_PREON>,
	TransitionEffectL<TrConcat<TrInstant,AlphaL<Black,SmoothStep<Sin<Int<10>,Int<16500>,Int<14500>>,Sin<Int<7>,Int<10500>,Int<9500>>>>,TrDelayX<WavLen<>>>,EFFECT_PREON>
	>> */

/*
{ "Coda;common", "tracks/Runar.wav",
	StylePtr < Layers <
		Mix<Sin<Int<3>>,AudioFlicker<RotateColorsX<Variation,DodgerBlue>,Stripes<5000,-90,RotateColorsX<Variation,Rgb<0,55,165>>,RotateColorsX<Variation,Rgb<0,85,115>>,RotateColorsX<Variation,Rgb<0,65,145>>,RotateColorsX<Variation,Rgb<0,30,185>>>>,AudioFlicker<RotateColorsX<Variation,Rgb<0,155,255>>,Stripes<5000,-90,RotateColorsX<Variation,Rgb<0,95,170>>,RotateColorsX<Variation,Rgb<0,115,215>>,RotateColorsX<Variation,Rgb<0,145,145>>,RotateColorsX<Variation,Rgb<0,65,225>>>>>,
		//Rotates   ^3 times per minute between DodgerBlue and DeepSkyBlue with subtle Cyan/Blue audioflicker
		//AudioFlicker<RotateColorsX<Variation,DeepSkyBlue>,RotateColorsX<Variation,Rgb<0,95,195>>>,
		//Alternate DeepSkyBlue with very subtle audioflicker
		AlphaL<BrownNoiseFlicker<RotateColorsX<Variation,DeepSkyBlue>,Black,300>,SwingSpeed<400>>,
		//Unstable swing
		AlphaL<Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,DeepSkyBlue>,Black>,Black,RotateColorsX<Variation,DeepSkyBlue>,Black>,SwingSpeed<525>>,
		//Unstable ripple swing
		LockupTrL<Layers<
		AlphaL<AudioFlickerL<Rgb<255,240,80>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,
		AlphaL<LemonChiffon,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<875>>,SaberBase::LOCKUP_NORMAL>,
		//Responsive lockup effect with screeching humpflicker endlock
		//LockupTrL<Layers<
		//AlphaL<AudioFlickerL<White>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,
		//AlphaL<White,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,White,TrFade<4000>>,SaberBase::LOCKUP_NORMAL>,
		//Alternate standard lockup
		ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,
		//Responsive lightning block
		ResponsiveStabL<RotateColorsX<Variation,Yellow>>,
		//Responsive stab
		//ResponsiveStabL<Red>,
		//Alternate responsive stab, no color change
		EffectSequence<EFFECT_BLAST,ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,LocalizedClashL<White,80,30,EFFECT_BLAST>,ResponsiveBlastWaveL<White,Scale<SwingSpeed<400>,Int<500>,Int<200>>,Scale<SwingSpeed<400>,Int<100>,Int<400>>>,BlastL<White,200,200>,ResponsiveBlastFadeL<White,Scale<SwingSpeed<400>,Int<6000>,Int<12000>>,Scale<SwingSpeed<400>,Int<400>,Int<100>>>,ResponsiveBlastL<White,Scale<SwingSpeed<400>,Int<400>,Int<100>>,Scale<SwingSpeed<400>,Int<200>,Int<100>>,Scale<SwingSpeed<400>,Int<400>,Int<200>>>>,
		//Multi-blast, blaster reflect cycles through different responsive effects
		//ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>>,
		//Alternate responsive blast
		ResponsiveClashL<TransitionEffect<Rgb<255,240,80>,LemonChiffon,TrInstant,TrFade<100>,EFFECT_CLASH>,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,
		//Responsive Clash
		//ResponsiveClashL<White,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,
		//Alternate white clash
		TransitionEffectL<TrConcat<TrInstant,Stripes<3000,-3500,RotateColorsX<Variation,Rgb<90,180,255>>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<0,26,60>>,Black>,BrownNoiseFlicker<RotateColorsX<Variation,Rgb<90,180,255>>,RotateColorsX<Variation,Rgb<0,26,60>>,200>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<0,42,128>>,RotateColorsX<Variation,Rgb<0,26,60>>>>,TrFade<400>,Stripes<3000,-3500,RotateColorsX<Variation,Rgb<90,180,255>>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<0,26,60>>,Black>,BrownNoiseFlicker<RotateColorsX<Variation,Rgb<90,180,255>>,RotateColorsX<Variation,Rgb<0,26,60>>,200>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<0,42,128>>,RotateColorsX<Variation,Rgb<0,26,60>>>>,TrFade<450>,HumpFlickerL<AlphaL<RotateColorsX<Variation,Rgb<90,180,255>>,Int<19000>>,25>,TrFade<2875>>,EFFECT_IGNITION>,
		//Stabilize ignition effect
		TransitionEffectL<TrConcat<TrFade<1125>,RotateColorsX<Variation,Rgb<90,180,255>>,TrInstant>,EFFECT_RETRACTION>,
		//Slow brighten retraction effect
		LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,
		//Drag
		LockupTrL<AlphaL<Mix<TwistAngle<>,Red,Orange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,
		//Responsive melt
		EffectSequence<EFFECT_POWERSAVE,AlphaL<Black,Int<8192>>,AlphaL<Black,Int<16384>>,AlphaL<Black,Int<24576>>,AlphaL<Black,Int<0>>>,
		//Power save, if using fett263's prop file hold Aux and click PWR while ON (pointing up) to dim blade in 25% increments.
		InOutTrL<TrWipe<500>,TrWipeIn<1125>>,
		//Standard ignition/retraction
		//TransitionEffectL<TrConcat<TrDelay<1500>,Black,TrFade<1000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_BOOT>,
		//TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_NEWFONT>,
		//Optional/alternate passive battery monitor, on boot (1st line) or font change (2nd line) you will get a visual indicator at the emitter of your current battery level. This also works without a blade if you have a lit emitter or blade plug. Green is Full, Red is Low (the color will blend from Green to Red as the battery is depleted), the indicator will fade out after 3000 ms and not display again until powered down and back up or fonts change.
		TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrDelay<2000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrFade<1000>>,EFFECT_BATTERY_LEVEL>,
		//On demand battery level, if using fett263's prop file Hold AUX and click PWR while OFF, the battery level is represented by the location on the blade; tip = full, hilt = low and color; green = full, yellow = half, red = low
		TransitionEffectL<TrConcat<TrFade<450>,AlphaL<HumpFlickerL<RotateColorsX<Variation,DeepSkyBlue>,10>,Bump<Int<0>,Int<3000>>>,TrFade<350>,AlphaL<HumpFlickerL<RotateColorsX<Variation,DeepSkyBlue>,15>,Bump<Int<0>,Int<5000>>>,TrFade<450>,AlphaL<HumpFlickerL<RotateColorsX<Variation,DeepSkyBlue>,20>,Bump<Int<0>,Int<7000>>>,TrFade<500>,AlphaL<HumpFlickerL<RotateColorsX<Variation,DeepSkyBlue>,25>,Bump<Int<0>,Int<10500>>>,TrBoing<150,1>>,EFFECT_PREON>
		//Overload preon effect
	>> () //, "coda" 
},

/*
{ "Ra;common", "tracks/fates.wav",
	   StylePtr < Layers <
		AudioFlicker<RotateColorsX<Variation,Rgb16<65535,0,38402>>,RotateColorsX<Variation,Rgb<180,0,120>>>,
	   //Magenta audioflicker
	   AlphaL<AudioFlickerL<Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<230,0,35>>,Black>,Black,RotateColorsX<Variation,Rgb<230,0,35>>,Black>>,SwingSpeed<350>>,
	   //Ripple audioflicker swing
	   //AlphaL<AudioFlickerL<BrownNoiseFlicker<RotateColorsX<Variation,Rgb<230,0,35>>,Black,300>>,SwingSpeed<300>>,
	   //Alternate unstable audioflicker swing
	   LockupTrL<Layers<
		 AlphaL<AudioFlickerL<White>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,
		 AlphaL<White,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,AlphaL<White,Int<0>>,TrWaveX<White,Int<300>,Int<100>,Int<400>,Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>>>,SaberBase::LOCKUP_NORMAL>,
	   //Responsive lockup
	   ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,
	   //Responsive lightning block
	   AlphaL<RotateColorsX<Variation,DeepPink>,SmoothStep<Scale<SlowNoise<Int<2500>>,Int<1000>,Int<3000>>,Int<-4000>>>,
	   //Sparking emitter flare
	   ResponsiveStabL<Red>,
	   //Responsive stab
	   EffectSequence<EFFECT_BLAST,TransitionEffectL<TrConcat<TrInstant,AlphaL<White,BlastF<200,200>>,TrFade<300>>,EFFECT_BLAST>,ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,ResponsiveBlastWaveL<White,Scale<SwingSpeed<400>,Int<500>,Int<200>>,Scale<SwingSpeed<400>,Int<100>,Int<400>>>,ResponsiveBlastFadeL<White,Scale<SwingSpeed<400>,Int<6000>,Int<12000>>,Scale<SwingSpeed<400>,Int<400>,Int<100>>>,ResponsiveBlastL<White,Scale<SwingSpeed<400>,Int<400>,Int<100>>,Scale<SwingSpeed<400>,Int<200>,Int<100>>,Scale<SwingSpeed<400>,Int<400>,Int<200>>>>,
	   //Multi-blast, blaster reflect cycles through different responsive effects
	   ResponsiveClashL<White,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,
	   //Responsive clash
	   LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,
	   //Drag
	   LockupTrL<AlphaL<Mix<TwistAngle<>,Red,Orange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,
	   //Responsive melt
	   EffectSequence<EFFECT_POWERSAVE,AlphaL<Black,Int<8192>>,AlphaL<Black,Int<16384>>,AlphaL<Black,Int<24576>>,AlphaL<Black,Int<0>>>,
	   //Power save, if using fett263's prop file hold Aux and click PWR while ON (pointing up) to dim blade in 25% increments.
	   InOutTrL<TrColorCycle<3000,3000,0>,TrColorCycle<1250>>,
	   //Color cycle ignition and retraction
	   //TransitionEffectL<TrConcat<TrDelay<1500>,Black,TrFade<1000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_BOOT>,
	   //TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_NEWFONT>,
	   //Optional/alternate passive battery monitor, on boot (1st line) or font change (2nd line) you will get a visual indicator at the emitter of your current battery level. This also works without a blade if you have a lit emitter or blade plug. Green is Full, Red is Low (the color will blend from Green to Red as the battery is depleted), the indicator will fade out after 3000 ms and not display again until powered down and back up or fonts change.
	   TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrDelay<2000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrFade<1000>>,EFFECT_BATTERY_LEVEL>
	   //On demand battery level, if using fett263's prop file Hold AUX and click PWR while OFF, the battery level is represented by the location on the blade; tip = full, hilt = low and color; green = full, yellow = half, red = low
	   >> () //, "ra" 
},

/*
{ "Endure;common", "tracks/",
	StylePtr < Layers <
		Mix<Scale<BladeAngle<19000>,Int<32768>,Int<0>>,Blinking<HumpFlicker<RotateColorsX<Variation,Red>,AudioFlicker<RotateColorsX<Variation,Rgb<128,0,0>>,RotateColorsX<Variation,Rgb16<11585,0,0>>>,35>,RotateColorsX<Variation,Red>,918,900>,HumpFlicker<RotateColorsX<Variation,Red>,AudioFlicker<RotateColorsX<Variation,Rgb<128,0,0>>,RotateColorsX<Variation,Rgb16<11585,0,0>>>,35>>,
		//Heart beat humpflicker - point the blade up to blend in a subtle heart beat - NOTE: Due to the way Proffie works, this isn't always "lined up" and might be slightly ahead or slightly behind the heart beat. Personally, I don't mind this, as it seems like it's just part of the beat. But if you want to fix this you can either change to another preset then change back or turn the saber off and back on until it's lined up.
		//HumpFlicker<RotateColorsX<Variation,Red>,AudioFlicker<RotateColorsX<Variation,Rgb<128,0,0>>,Rgb16<11585,0,0>>,35>,
		//Alternate humpflicker, no heart beat
		TransitionEffectL<TrConcat<TrDelay<1200>,HumpFlicker<RotateColorsX<Variation,Red>,AudioFlicker<RotateColorsX<Variation,Rgb<128,0,0>>,RotateColorsX<Variation,Rgb16<11585,0,0>>>,35>,TrFade<450>,RotateColorsX<Variation,Rgb16<26858,591,0>>,TrFade<300>,RotateColorsX<Variation,Rgb16<65535,11439,0>>,TrFade<50>>,EFFECT_FORCE>,
		//Charge up Force effect. I recommend commenting this out if you'll be using the included Quotes instead of Force sounds (Or wait for Proffie OS6!)
		AlphaL<AudioFlickerL<Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,Red>,Black>,Black,RotateColorsX<Variation,Red>,Black>>,SwingSpeed<265>>,
		//Audio responsive unstable/stripey swing effect
		AlphaL<BrownNoiseFlicker<RotateColorsX<Variation,Red>,Black,300>,SwingSpeed<350>>,
		//Unstable swing effect
		AlphaL<AlphaL<Stripes<2000,-3750,RotateColorsX<Variation,Rgb16<65535,11439,0>>,RotateColorsX<Variation,Rgb<60,0,0>>,Pulsing<RotateColorsX<Variation,Rgb<30,0,0>>,Black,800>>,Scale<IsLessThan<SwingSpeed<850>,Int<13600>>,Scale<SwingSpeed<850>,Int<-19300>,Int<32768>>,Int<0>>>,SmoothStep<Int<14500>,Int<16000>>>,
		//Bright ripple hard swing effect - swing hard enough to trigger an accent swing and blood orange ripples up the blade
		LockupTrL<Layers<
		AlphaL<AudioFlickerL<Rgb<255,150,0>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,
		AlphaL<Moccasin,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,White,TrFade<650>,BrownNoiseFlicker<RotateColorsX<Variation,Rgb16<65535,11439,0>>,Black,300>,TrFade<1000>,AudioFlickerL<BrownNoiseFlicker<RotateColorsX<Variation,Red>,Black,300>>,TrFade<2675>>,SaberBase::LOCKUP_NORMAL>,
		//Responsive lockup effect with growly audio responsive heart beat endlock
		//LockupTrL<Layers<
		//AlphaL<AudioFlickerL<White>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,
		//AlphaL<White,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,White,TrFade<4000>>,SaberBase::LOCKUP_NORMAL>,
		//Alternate standard lockup
		ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,
		//Responsive lightning block
		AlphaL<Mix<Scale<BladeAngle<19000>,Int<32768>,Int<0>>,StyleFire<Gradient<RotateColorsX<Variation,Rgb16<65535,11439,0>>,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Red>>,RotateColorsX<Variation,Rgb<60,0,0>>,0,2,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>>,StyleFire<Gradient<RotateColorsX<Variation,Rgb16<65535,11439,0>>,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Red>>,RotateColorsX<Variation,Rgb<60,0,0>>,0,1,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>>>,SmoothStep<Scale<SlowNoise<Int<3000>>,Int<1750>,Int<4125>>,Int<-4000>>>,
		//Responsive flame emitter effect, point the blade up to speed up the flame
		//AlphaL<StyleFire<Gradient<RotateColorsX<Variation,Rgb16<65535,11439,0>>,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Red>>,RotateColorsX<Variation,Rgb<60,0,0>>,0,1,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>>,SmoothStep<Scale<SlowNoise<Int<3000>>,Int<2000>,Int<4000>>,Int<-4000>>>,
		//Alternate non-responsive flame emitter effect
		ResponsiveStabL<Orange>,
		//Responsive stab
		EffectSequence<EFFECT_BLAST,ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,LocalizedClashL<White,80,30,EFFECT_BLAST>,ResponsiveBlastWaveL<White,Scale<SwingSpeed<400>,Int<500>,Int<200>>,Scale<SwingSpeed<400>,Int<100>,Int<400>>>,BlastL<White,200,200>,ResponsiveBlastFadeL<White,Scale<SwingSpeed<400>,Int<6000>,Int<12000>>,Scale<SwingSpeed<400>,Int<400>,Int<100>>>,ResponsiveBlastL<White,Scale<SwingSpeed<400>,Int<400>,Int<100>>,Scale<SwingSpeed<400>,Int<200>,Int<100>>,Scale<SwingSpeed<400>,Int<400>,Int<200>>>>,
		//Multi-blast, blaster reflect cycles through different responsive effects
		//ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>>,
		//Alternate responsive blast
		ResponsiveClashL<TransitionEffect<Rgb<255,150,0>,Moccasin,TrInstant,TrFade<100>,EFFECT_CLASH>,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,
		//Responsive Clash
		//ResponsiveClashL<White,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,
		//Alternate white clash
		TransitionEffectL<TrConcat<TrInstant,Stripes<1900,-2350,RotateColorsX<Variation,Rgb16<65535,5115,0>>,RandomPerLEDFlicker<RotateColorsX<Variation,Red>,Black>,BrownNoiseFlicker<RotateColorsX<Variation,Rgb16<65535,8357,0>>,RotateColorsX<Variation,Orange>,200>,RandomPerLEDFlicker<RotateColorsX<Variation,Red>,RotateColorsX<Variation,Rgb<75,0,0>>>>,TrFade<2350>>,EFFECT_IGNITION>,
		//Unstable ripple ignition effect
		TransitionEffectL<TrConcat<TrInstant,HumpFlickerL<RotateColorsX<Variation,Rgb16<65535,1899,0>>,40>,TrFade<1750>,BrownNoiseFlicker<RotateColorsX<Variation,Rgb16<65535,1899,0>>,Black,300>,TrInstant>,EFFECT_RETRACTION>,
		//Retraction effect, bright humpflicker fades to unstable
		LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,
		//Drag
		LockupTrL<AlphaL<Mix<TwistAngle<>,Rgb<255,200,0>,DarkOrange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,
		//Responsive melt
		EffectSequence<EFFECT_POWERSAVE,AlphaL<Black,Int<8192>>,AlphaL<Black,Int<16384>>,AlphaL<Black,Int<24576>>,AlphaL<Black,Int<0>>>,
		//Power save, if using fett263's prop file hold Aux and click PWR while ON (pointing up) to dim blade in 25% increments.
		InOutTrL<TrJoin<TrWipe<2000>,TrWaveX<White,Int<2150>,Int<400>,Int<2000>,Int<0>>>,TrJoin<TrWipeIn<1750>,TrWaveX<White,Int<1750>,Int<400>,Int<1750>,Int<32768>>>>,
		//Spark tip ignition/retraction
		//InOutTrL<TrWipe<2000>,TrWipeIn<1750>>,
		//Alternate standard ignition/retraction
		TransitionEffectL<TrConcat<TrDelay<1750>,AlphaL<Mix<Trigger<EFFECT_RETRACTION,Int<4250>,Int<6000>,Int<2500>>,BrownNoiseFlicker<Black,RotateColorsX<Variation,Red>,100>,RandomPerLEDFlicker<RotateColorsX<Variation,Red>,RotateColorsX<Variation,Rgb16<14386,0,0>>>,StyleFire<Gradient<RotateColorsX<Variation,Rgb16<65535,11439,0>>,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Red>>,RotateColorsX<Variation,Rgb<60,0,0>>,0,1,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>>>,SmoothStep<Scale<NoisySoundLevel,Int<-1125>,Int<20000>>,Int<-4000>>>,TrDelay<5000>>,EFFECT_RETRACTION>,
		//Audio responsive cooldown retraction effect
		//TransitionEffectL<TrConcat<TrDelay<1500>,Black,TrFade<1000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_BOOT>,
		//TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_NEWFONT>,
		//Optional/alternate passive battery monitor, on boot (1st line) or font change (2nd line) you will get a visual indicator at the emitter of your current battery level. This also works without a blade if you have a lit emitter or blade plug. Green is Full, Red is Low (the color will blend from Green to Red as the battery is depleted), the indicator will fade out after 3000 ms and not display again until powered down and back up or fonts change.
		TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrDelay<2000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrFade<1000>>,EFFECT_BATTERY_LEVEL>,
		//On demand battery level, if using fett263's prop file Hold AUX and click PWR while OFF, the battery level is represented by the location on the blade; tip = full, hilt = low and color; green = full, yellow = half, red = low
		TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<Trigger<EFFECT_PREON,Int<1750>,Int<250>,Int<3000>>,StyleFire<Gradient<RotateColorsX<Variation,Rgb16<65535,11439,0>>,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Red>,RotateColorsX<Variation,Red>>,RotateColorsX<Variation,Rgb<60,0,0>>,0,1,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>,FireConfig<0,2000,5>>,RandomPerLEDFlicker<RotateColorsX<Variation,Red>,RotateColorsX<Variation,Rgb16<14386,0,0>>>,BrownNoiseFlicker<Black,RotateColorsX<Variation,Red>,100>>,SmoothStep<Scale<NoisySoundLevel,Int<-1000>,Int<25000>>,Int<-4000>>>,TrDelay<2000>>,EFFECT_PREON>,
		//Audio responsive charge-up preon effect
		TransitionEffectL<TrConcat<TrDelay<1150>,TransitionLoopL<TrWaveX<RotateColorsX<Variation,Red>,Int<125>,Int<350>,Int<315>,Int<0>>>,TrDelay<850>>,EFFECT_PREON>
		//Ripple out preon effect
		>> () //, "endure"
},
*/

/*
{ "Staff;common", "tracks/fates",
	StylePtr<Layers<StyleFire<Strobe<RotateColorsX<Variation,Rgb<95,0,210>>,Strobe<Rgb<100,100,150>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<95,0,210>>,Black>,50,1>,100,1>,RotateColorsX<Variation,Rgb<23,0,65>>,0,5,FireConfig<2,1000,5>,FireConfig<2,1000,5>,FireConfig<2,1000,5>,FireConfig<2,1000,5>>,LockupTrL<Layers<AlphaL<AudioFlickerL<White>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,AlphaL<White,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,White,TrFade<400>>,SaberBase::LOCKUP_NORMAL>,ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,ResponsiveStabL<Red,TrWipeIn<600>,TrWipe<600>>,ResponsiveBlastFadeL<White,Scale<SwingSpeed<200>,Int<8000>,Int<16000>>,Int<400>>,ResponsiveClashL<White,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,LockupTrL<AlphaL<Mix<TwistAngle<>,Red,Orange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,InOutTrL<TrWipe<300>,TrWipeInX<RetractionTime<0>>,Black>>>
	() //, "staff"
},
*/

/*
{ "Deadlink;common", "tracks/",

	StylePtr<Layers<
	HumpFlicker<RotateColorsX<Variation,Magenta>,RotateColorsX<Variation,Rgb<150,0,150>>,50>,
	//Magenta HumpFlicker
	AlphaL<Stripes<2500,-3000,RotateColorsX<Variation,DeepPink>,RotateColorsX<Variation,Rgb16<12482,0,18076>>,Pulsing<RotateColorsX<Variation,Rgb<10,0,26>>,Black,800>>,SwingSpeed<350>>,
	//Ripple swing effect
	//AlphaL<AudioFlickerL<Stripes<2500,-3000,RotateColorsX<Variation,DeepPink>,RotateColorsX<Variation,Rgb16<12482,0,18076>>,Pulsing<RotateColorsX<Variation,Rgb<10,0,26>>,Black,800>>>,SwingSpeed<300>>,
	//Alternate audioflicker ripple swing effect
	LockupTrL<Layers<
	AlphaL<AudioFlickerL<Rgb<255,225,0>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,
	AlphaL<NavajoWhite,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,AlphaL<White,Int<0>>,TrWaveX<White,Int<300>,Int<100>,Int<400>,Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>>>,SaberBase::LOCKUP_NORMAL>,
	//Responsive lockup
	ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,
	//Responsive lightning block
	AlphaL<RotateColorsX<Variation,Rgb16<33124,0,65535>>,SmoothStep<Scale<SlowNoise<Int<2500>>,Int<1000>,Int<3500>>,Int<-4000>>>,
	//Sparking emitter flare
	ResponsiveStabL<Red>,
	//Responsive stab
	EffectSequence<EFFECT_BLAST,ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,LocalizedClashL<White,80,30,EFFECT_BLAST>,ResponsiveBlastWaveL<White,Scale<SwingSpeed<400>,Int<500>,Int<200>>,Scale<SwingSpeed<400>,Int<100>,Int<400>>>,BlastL<White,200,200>,ResponsiveBlastFadeL<White,Scale<SwingSpeed<400>,Int<6000>,Int<12000>>,Scale<SwingSpeed<400>,Int<400>,Int<100>>>,ResponsiveBlastL<White,Scale<SwingSpeed<400>,Int<400>,Int<100>>,Scale<SwingSpeed<400>,Int<200>,Int<100>>,Scale<SwingSpeed<400>,Int<400>,Int<200>>>>,
	//Multi-blast, blaster reflect cycles through different responsive effects
	ResponsiveClashL<TransitionEffect<Rgb<255,225,0>,NavajoWhite,TrInstant,TrFade<100>,EFFECT_CLASH>,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,
	//Responsive clash
	TransitionEffectL<TrConcat<TrDelay<875>,Stripes<3000,-3500,RotateColorsX<Variation,Rgb<160,0,255>>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<21,0,52>>,Black>,BrownNoiseFlicker<RotateColorsX<Variation,Rgb<160,0,255>>,RotateColorsX<Variation,Rgb<21,0,52>>,200>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<42,0,105>>,RotateColorsX<Variation,Rgb<21,0,52>>>>,TrFade<250>,HumpFlicker<RotateColorsX<Variation,Magenta>,RotateColorsX<Variation,Rgb<80,0,80>>,50>,TrFade<400>,Stripes<3000,-3500,RotateColorsX<Variation,DeepPink>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<21,0,52>>,Black>,BrownNoiseFlicker<RotateColorsX<Variation,Rgb<160,0,255>>,RotateColorsX<Variation,Rgb<21,0,52>>,200>,RandomPerLEDFlicker<RotateColorsX<Variation,Rgb<42,0,105>>,RotateColorsX<Variation,Rgb<21,0,52>>>>,TrFade<1500>>,EFFECT_IGNITION>,
	//Unstable ignition effect
	TransitionEffectL<TrConcat<TrInstant,HumpFlickerL<RotateColorsX<Variation,Rgb<180,60,255>>,40>,TrFade<2000>>,EFFECT_RETRACTION>,
	//Bright HumpFlicker retraction effect
	LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,
	//Drag
	LockupTrL<AlphaL<Mix<TwistAngle<>,Red,Orange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,
	//Responsive melt
	EffectSequence<EFFECT_POWERSAVE,AlphaL<Black,Int<8192>>,AlphaL<Black,Int<16384>>,AlphaL<Black,Int<24576>>,AlphaL<Black,Int<0>>>,
	//Power save, if using fett263's prop file hold Aux and click PWR while ON (pointing up) to dim blade in 25% increments.
	InOutTrL<TrConcat<TrWipeIn<200>,RandomBlink<30000,RotateColorsX<Variation,Rgb16<65535,13655,65535>>>,TrWipeIn<200>,Mix<SmoothStep<Scale<SlowNoise<Int<30000>>,Int<1000>,Int<6000>>,Int<-3000>>,Black,RotateColorsX<Variation,Rgb16<65535,13655,65535>>>,TrDelay<400>,Mix<SmoothStep<Int<4000>,Int<-3000>>,Black,White>,TrWipe<175>>,TrColorCycle<2000>>,
	//Lightning strike ignition, cycle down retraction
	//TransitionEffectL<TrConcat<TrDelay<1500>,Black,TrFade<1000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_BOOT>,
	//TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_NEWFONT>,
	//Optional/alternate passive battery monitor, on boot (1st line) or font change (2nd line) you will get a visual indicator at the emitter of your current battery level. This also works without a blade if you have a lit emitter or blade plug. Green is Full, Red is Low (the color will blend from Green to Red as the battery is depleted), the indicator will fade out after 3000 ms and not display again until powered down and back up or fonts change.
	TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrDelay<2000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrFade<1000>>,EFFECT_BATTERY_LEVEL>
	//On demand battery level, if using fett263's prop file Hold AUX and click PWR while OFF, the battery level is represented by the location on the blade; tip = full, hilt = low and color; green = full, yellow = half, red = low
	>>() //, "deadlink"
},
*/

/*
{ "Volatile;common", "tracks/",

	StylePtr<Layers<
	Mix<Sin<Int<1>>,AudioFlicker<RotateColorsX<Variation,Blue>,RotateColorsX<Variation,Rgb<0,0,128>>>,AudioFlicker<RotateColorsX<Variation,Green>,RotateColorsX<Variation,Rgb<0,128,0>>>>,
	//Rotates   ^ 1 time per minute between blue and green audioflicker
	EffectSequence<EFFECT_FORCE,AlphaL<Mix<Sin<Int<1>>,Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,Blue>,Black>,RotateColorsX<Variation,RotateColorsX<Variation,Rgb<0,0,45>>>,RotateColorsX<Variation,Blue>,RotateColorsX<Variation,RotateColorsX<Variation,Rgb<0,0,45>>>>,Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,Green>,Black>,RotateColorsX<Variation,Rgb<0,45,0>>,RotateColorsX<Variation,Green>,RotateColorsX<Variation,Rgb<0,45,0>>>>,SwingSpeed<400>>,AlphaL<Mix<Sin<Int<2>>,Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,Blue>,Black>,RotateColorsX<Variation,RotateColorsX<Variation,Rgb<0,0,45>>>,RotateColorsX<Variation,Blue>,RotateColorsX<Variation,RotateColorsX<Variation,Rgb<0,0,45>>>>,Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,Green>,Black>,RotateColorsX<Variation,Rgb<0,45,0>>,RotateColorsX<Variation,Green>,RotateColorsX<Variation,Rgb<0,45,0>>>>,SwingSpeed<400>>>,
	//Force toggleable swing effect - switches betw^een unstable blue and green that cycle twice as fast as the base layer (so the blue and green don't always match up with the base layer, allowing for multiple mixes of blue/green) and unstable blue and green that match the base layer                                                                                                                                                                                                                             ^
	//AlphaL<Mix<Sin<Int<2>>,Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,Blue>,Black>,RotateColorsX<Variation,RotateColorsX<Variation,Rgb<0,0,45>>>,RotateColorsX<Variation,Blue>,RotateColorsX<Variation,RotateColorsX<Variation,Rgb<0,0,45>>>>,Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,Green>,Black>,RotateColorsX<Variation,Rgb<0,45,0>>,RotateColorsX<Variation,Green>,RotateColorsX<Variation,Rgb<0,45,0>>>>,SwingSpeed<400>>,
	//AlphaL<Mix<Sin<Int<2>>,AlphaL<BrownNoiseFlicker<RotateColorsX<Variation,Blue>,Black,300>,SwingSpeed<400>>,AlphaL<BrownNoiseFlicker<RotateColorsX<Variation,Green>,Black,300>,SwingSpeed<400>>>,SwingSpeed<400>>,
	//Alternate swing    ^ Rotates 2 times per minute between unstable ripple blue and green, so the blue and green don't always match up with the base layer, allowing for multiple mixes of blue/green
	//AlphaL<Mix<Sin<Int<1>>,Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,Blue>,Black>,RotateColorsX<Variation,RotateColorsX<Variation,Rgb<0,0,45>>>,RotateColorsX<Variation,Blue>,RotateColorsX<Variation,RotateColorsX<Variation,Rgb<0,0,45>>>>,Stripes<1000,-2000,RandomPerLEDFlicker<RotateColorsX<Variation,Green>,Black>,RotateColorsX<Variation,Rgb<0,45,0>>,RotateColorsX<Variation,Green>,RotateColorsX<Variation,Rgb<0,45,0>>>>,SwingSpeed<400>>,
	//AlphaL<Mix<Sin<Int<1>>,AlphaL<BrownNoiseFlicker<RotateColorsX<Variation,Blue>,Black,300>,SwingSpeed<400>>,AlphaL<BrownNoiseFlicker<RotateColorsX<Variation,Green>,Black,300>,SwingSpeed<400>>>,SwingSpeed<400>>,
	//Alternate swing    ^ Rotates 1 time per minute between unstable ripple blue and green, matching the base layer
	LockupTrL<Layers<
	AlphaL<AudioFlickerL<Rgb<255,225,0>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,
	AlphaL<NavajoWhite,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>,Int<10000>>>>,TrConcat<TrInstant,White,TrFade<400>>,TrConcat<TrInstant,AlphaL<White,Int<0>>,TrWaveX<TransitionEffect<NavajoWhite,Rgb<255,225,0>,TrInstant,TrFade<200>,EFFECT_LOCKUP_BEGIN>,Int<300>,Int<100>,Int<400>,Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>>>>,SaberBase::LOCKUP_NORMAL>,
	//Responsive lockup
	ResponsiveLightningBlockL<Strobe<White,AudioFlicker<White,Blue>,50,1>,TrConcat<TrInstant,AlphaL<White,Bump<Int<12000>,Int<18000>>>,TrFade<200>>,TrConcat<TrInstant,HumpFlickerL<AlphaL<White,Int<16000>>,30>,TrSmoothFade<600>>>,
	//Responsive lightning block
	ResponsiveStabL<Red,TrWipeIn<600>,TrWipe<600>>,
	//Responsive stab
	EffectSequence<EFFECT_BLAST,TransitionEffectL<TrConcat<TrInstant,AlphaL<White,BlastF<200,200>>,TrFade<300>>,EFFECT_BLAST>,ResponsiveBlastL<White,Int<400>,Scale<SwingSpeed<200>,Int<100>,Int<400>>,Int<400>>,ResponsiveBlastWaveL<White,Scale<SwingSpeed<400>,Int<500>,Int<200>>,Scale<SwingSpeed<400>,Int<100>,Int<400>>>,ResponsiveBlastFadeL<White,Scale<SwingSpeed<400>,Int<6000>,Int<12000>>,Scale<SwingSpeed<400>,Int<400>,Int<100>>>,ResponsiveBlastL<White,Scale<SwingSpeed<400>,Int<400>,Int<100>>,Scale<SwingSpeed<400>,Int<200>,Int<100>>,Scale<SwingSpeed<400>,Int<400>,Int<200>>>>,
	//Multi-blast, blaster reflect cycles through different responsive effects
	ResponsiveClashL<TransitionEffect<Rgb<255,225,0>,NavajoWhite,TrInstant,TrFade<100>,EFFECT_CLASH>,TrInstant,TrFade<400>,Scale<BladeAngle<0,16000>,Int<4000>,Int<26000>>,Int<6000>,Int<20000>>,
	//Responsive clash
	LockupTrL<AlphaL<BrownNoiseFlickerL<White,Int<300>>,SmoothStep<Int<30000>,Int<5000>>>,TrWipeIn<400>,TrFade<300>,SaberBase::LOCKUP_DRAG>,
	//Drag
	LockupTrL<AlphaL<Mix<TwistAngle<>,Red,Orange>,SmoothStep<Int<28000>,Int<5000>>>,TrWipeIn<600>,TrFade<300>,SaberBase::LOCKUP_MELT>,
	//Responsive melt
	EffectSequence<EFFECT_POWERSAVE,AlphaL<Black,Int<8192>>,AlphaL<Black,Int<16384>>,AlphaL<Black,Int<24576>>,AlphaL<Black,Int<0>>>,
	//Power save, if using fett263's prop file hold Aux and click PWR while ON (pointing up) to dim blade in 25% increments.
	InOutTrL<TrWipeSparkTip<White,300>,TrWipeIn<2000>>,
	//Spark tip ignition, wipe in retraction
	//TransitionEffectL<TrConcat<TrDelay<1500>,Black,TrFade<1000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_BOOT>,
	//TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<Int<0>,Int<6000>>>,TrFade<3000>>,EFFECT_NEWFONT>,
	//Optional/alternate passive battery monitor, on boot (1st line) or font change (2nd line) you will get a visual indicator at the emitter of your current battery level. This also works without a blade if you have a lit emitter or blade plug. Green is Full, Red is Low (the color will blend from Green to Red as the battery is depleted), the indicator will fade out after 3000 ms and not display again until powered down and back up or fonts change.
	TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrDelay<2000>,AlphaL<Mix<BatteryLevel,Red,Green>,Bump<BatteryLevel,Int<10000>>>,TrFade<1000>>,EFFECT_BATTERY_LEVEL>,
	//On demand battery level, if using fett263's prop file Hold AUX and click PWR while OFF, the battery level is represented by the location on the blade; tip = full, hilt = low and color; green = full, yellow = half, red = low
	TransitionEffectL<TrConcat<TrInstant,AlphaL<Mix<Trigger<EFFECT_PREON,Int<3000>,Int<3000>,Int<1000>>,BrownNoiseFlicker<Black,RotateColorsX<Variation,Blue>,100>,RandomPerLEDFlicker<RotateColorsX<Variation,Blue>,RotateColorsX<Variation,Rgb16<0,778,22863>>>,BrownNoiseFlicker<Mix<NoisySoundLevel,RotateColorsX<Variation,Blue>,RotateColorsX<Int<4000>,RotateColorsX<Variation,Cyan>>>,RotateColorsX<Variation,Green>,50>>,SmoothStep<Scale<NoisySoundLevel,Int<-2500>,Int<17500>>,Int<-4000>>>,TrDelay<6500>>,EFFECT_PREON>
	//Preon, reacts to sound level
	>>() //, "volatile"
},
*/

/*
// Blank
{ "WHITE", "tracks/",
				
	StylePtr<
		Layers<
			Black,
			LockupTrL<
				Layers<
					AlphaL<
						AudioFlickerL<White>,
						Bump<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0, 16000>,
									Int<4000>,
									Int<26000>
								>,
								Int<6000>
							>,
							Scale<
								SwingSpeed<100>,
								Int<14000>,
								Int<18000>
							>
						>
					>,
					AlphaL<
						White,
						Bump<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0, 16000>,
									Int<4000>,
									Int<26000>
								>,
								Int<6000>
							>,
							Int<10000>
						>
					>
				>,
				TrConcat<
					TrInstant,
						White,
						TrFade<400>
					>,
					TrConcat<
						TrInstant,
						White,
						TrFade<400>
					>,
					SaberBase::LOCKUP_NORMAL
				>,
		
				ResponsiveLightningBlockL<
					Strobe<
						White,
						AudioFlicker<
							White,
							Blue
						>,
						50,
						1
					>,
					TrConcat<
						TrInstant,
						AlphaL<
							White,
							Bump<
								Int<12000>,
								Int<18000>
							>
						>,
						TrFade<200>
					>,
					TrConcat<
						TrInstant,
						HumpFlickerL<
							AlphaL<
								White,
								Int<16000>
							>,
							30
						>,
						TrSmoothFade<600>
					>
				>,

				ResponsiveStabL<
					Orange,
					TrWipeIn<600>,
					TrWipe<600>
				>,

				ResponsiveBlastL<
					White,
					Int<400>,
					Scale<
						SwingSpeed<200>,
						Int<100>,
						Int<400>
					>,
					Int<400>
				>,

				ResponsiveClashL<
					White,
					TrInstant,
					TrFade<400>,
					Scale<
						BladeAngle<0, 16000>,
						Int<4000>,
						Int<26000>
					>,
					Int<6000>,
					Int<20000>
				>,

				LockupTrL<
					AlphaL<
						BrownNoiseFlickerL<
							White,
							Int<300>
						>,
						SmoothStep<
							Int<30000>,
							Int<5000>
						>
					>,
					TrWipeIn<400>,
					TrFade<300>,
					SaberBase::LOCKUP_DRAG
				>,

				LockupTrL<
					AlphaL<
						Mix<
							TwistAngle<>,
							Rgb<255,200,0>,
							DarkOrange
						>,
						SmoothStep<
							Int<28000>,
							Int<5000>
						>
					>,
					TrWipeIn<600>,
					TrFade<300>,
					SaberBase::LOCKUP_MELT
				>,

				InOutTrL<
					TrWipe<300>,
					TrWipeIn<500>,
					Black
				>
			>
		>
		()
},
*/

/*
// Battery Level
{ "WHITE;common", "tracks/fates.wav",
	&style_charging, "Battery/nLevel" 
}
*/



// PROFFIE OS7 EZRA STYLE:
StylePtr<
	Layers<
		// BASE BLADE
		AudioFlicker<
			Stripes<
				23000,
				-1300,
				RgbArg<BASE_COLOR_ARG,Rgb<0,255,0>>,
				RgbArg<BASE_COLOR_ARG,Rgb<0,255,0>>,
				Mix<
					Int<11284>,
					Black,
					RgbArg<BASE_COLOR_ARG,Rgb<0,255,0>>
				>,
				RgbArg<BASE_COLOR_ARG,Rgb<0,255,0>>,
				Mix<
					Int<16384>,
					Black,
					RgbArg<BASE_COLOR_ARG,Rgb<0,255,0>>
				>
			>,
			RgbArg<BASE_COLOR_ARG,Rgb<0,255,0>>
		>,
		// USER 3 RAIN EFFECT??
		ColorSelect<
			EffectIncrementF<
				EFFECT_USER3,
				Int<2>
			>,
			TrFade<100>,
			AlphaL<
				White,
				Int<0>
			>,
			AlphaL<
				RgbArg<RETRACTION_COLOR_ARG,Rgb<255,255,255>>,
				SparkleF<300,800>
			>
		>,
		// USER 3 SOUND EFFECT
		TransitionEffectL<
			TrDoEffect<
				TrInstant,
				EFFECT_SOUND_LOOP,
				0
			>,
			EFFECT_USER3
		>,
		// STAB EFFECT
		TransitionEffectL<
			TrConcat<
				TrJoin<
					TrDelayX<
						WavLen<>
					>,
					TrWipeIn<200>
				>,
				AlphaL<
					AudioFlickerL<
						RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>
					>,
					SmoothStep<
						IntArg<MELT_SIZE_ARG,28000>,
						Int<2000>
					>
				>,
				TrWipe<200>
			>,
			EFFECT_STAB
		>,
		
		// BLAST EFFECT
		TransitionEffectL<
			TrRandom<
				TrWaveX<
					RgbArg<BLAST_COLOR_ARG,Rgb<255,199,119>>,
					Scale<
						WavLen<>,
						Int<100>,
						Int<400>
					>,
					Int<100>,
					Scale<
						WavLen<>,
						Int<100>,
						Int<400>
					>,
					Scale<
						EffectPosition<EFFECT_BLAST>,
						Int<28000>,
						Int<8000>
					>
				>,
				TrConcat<
					TrJoin<
						TrDelay<30>,
						TrInstant
					>,
					RgbArg<BLAST_COLOR_ARG,Rgb<255,199,119>>,
					TrFade<300>
				>
			>,
			EFFECT_BLAST
		>,
		
		// CLASH EFFECT
		Mix<
			IsLessThan<
				ClashImpactF<>,
				Int<26000>
			>,
			TransitionEffectL<
				TrConcat<
					TrInstant,
					AlphaL<
						RgbArg<CLASH_COLOR_ARG,Rgb<255,199,119>>,
						Bump<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0,16000>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<-12000>
									>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<10000>
									>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-10000>
								>
							>,
							Scale<
								ClashImpactF<>,
								Int<12000>,
								Int<60000>
							>
						>
					>,
					TrFadeX<
						Scale<
							ClashImpactF<>,
							Int<200>,
							Int<400>
						>
					>
				>,
				EFFECT_CLASH
			>,
			TransitionEffectL<
				TrWaveX<
					RgbArg<CLASH_COLOR_ARG,Rgb<255,199,119>>,
					Scale<
						ClashImpactF<>,
						Int<100>,
						Int<400>
					>,
					Int<100>,
					Scale<
						ClashImpactF<>,
						Int<100>,
						Int<400>
					>,
					Scale<
						BladeAngle<>,
						Scale<
							BladeAngle<0,16000>,
							Sum<
								IntArg<LOCKUP_POSITION_ARG,16000>,
								Int<-12000>
							>,
							Sum<
								IntArg<LOCKUP_POSITION_ARG,16000>,
								Int<10000>
							>
						>,
						Sum<
							IntArg<LOCKUP_POSITION_ARG,16000>,
							Int<-10000>
						>
					>
				>,
				EFFECT_CLASH
			>
		>,
		
		// LOCKUP EFFECT
		LockupTrL<
			// LOCKUP BEGIN
			TransitionEffect<
				AlphaL<
					AlphaMixL<
						Bump<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0,16000>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<-12000>
									>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<10000>
									>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-10000>
								>
							>,
							Scale<
								SwingSpeed<100>,
								Int<14000>,
								Int<22000>
							>
						>,
						AudioFlicker<
							RgbArg<LOCKUP_COLOR_ARG,Rgb<255,199,119>>,
							Mix<
								Int<12000>,
								Black,
								RgbArg<LOCKUP_COLOR_ARG,Rgb<255,199,119>>
							>
						>,
						BrownNoiseFlicker<
							RgbArg<LOCKUP_COLOR_ARG,Rgb<255,199,119>>,
							Mix<
								Int<12000>,
								Black,
								RgbArg<LOCKUP_COLOR_ARG,Rgb<255,199,119>>
							>,
							300
						>
					>,
					Bump<
						Scale<
							BladeAngle<>,
							Scale<
								BladeAngle<0,16000>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-12000>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<10000>
								>
							>,
							Sum<
								IntArg<LOCKUP_POSITION_ARG,16000>,
								Int<-10000>
							>
						>,
						Scale<
							SwingSpeed<100>,
							Int<14000>,
							Int<22000>
						>
					>
				>,
				AlphaL<
					AudioFlicker<
						RgbArg<LOCKUP_COLOR_ARG,Rgb<255,199,119>>,
						Mix<
							Int<20000>,
							Black,
							RgbArg<LOCKUP_COLOR_ARG,Rgb<255,199,119>>
						>
					>,
					Bump<
						Scale<
							BladeAngle<>,
							Scale<
								BladeAngle<0,16000>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-12000>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<10000>
								>
							>,
							Sum<
								IntArg<LOCKUP_POSITION_ARG,16000>,
								Int<-10000>
							>
						>,
						Scale<
							SwingSpeed<100>,
							Int<14000>,
							Int<18000>
						>
					>
				>,
				TrExtend<
					5000,
					TrInstant
				>,
				TrFade<5000>,
				EFFECT_LOCKUP_BEGIN
			>,
			// LOCKUP
			TrConcat<
				TrJoin<
					TrDelay<50>,
					TrInstant
				>,
				Mix<
					IsLessThan<
						ClashImpactF<>,
						Int<26000>
					>,
					RgbArg<LOCKUP_COLOR_ARG,Rgb<255,199,119>>,
					AlphaL<
						RgbArg<LOCKUP_COLOR_ARG,Rgb<255,199,119>>,
						Bump<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0,16000>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<-12000>
									>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<10000>
									>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-10000>
								>
							>,
							Scale<
								ClashImpactF<>,
								Int<20000>,
								Int<60000>
							>
						>
					>
				>,
				TrFade<300>
			>,
			// LOCKUP END
			TrConcat<
				TrInstant,
				RgbArg<LOCKUP_COLOR_ARG,Rgb<255,199,119>>,
				TrFade<400>
			>,
			SaberBase::LOCKUP_NORMAL,
			Int<1>
		>,
		
		// LIGHTNING BLOCK
		ResponsiveLightningBlockL<
			// LB
			Strobe<
				RgbArg<LB_COLOR_ARG,Rgb<191,255,255>>,
				AudioFlicker<
					RgbArg<LB_COLOR_ARG,Rgb<191,255,255>>,
					Blue
				>,
				50,
				1
			>,
			// LB START
			TrConcat<
				TrExtend<
					200,
					TrInstant
				>,
				AlphaL<
					RgbArg<LB_COLOR_ARG,Rgb<191,255,255>>,
					Bump<
						Scale<
							BladeAngle<>,
							Int<10000>,
							Int<21000>
						>,
						Int<10000>
					>
				>,
				TrFade<200>
			>,
			// LB END
			TrConcat<
				TrInstant,
				RgbArg<LB_COLOR_ARG,Rgb<191,255,255>>,
				TrFade<400>
			>,
			Int<1>
		>,
		
		// DRAG EFFECT
		LockupTrL<
			AlphaL<
				// DRAG BEGIN
				TransitionEffect<
					RandomPerLEDFlickerL<RgbArg<DRAG_COLOR_ARG,Rgb<255,255,255>>>,
					BrownNoiseFlickerL<
						RgbArg<DRAG_COLOR_ARG,Rgb<255,255,255>>,
						Int<300>
					>,
					TrExtend<
						4000,
						TrInstant
					>,
					TrFade<4000>,
					EFFECT_DRAG_BEGIN
				>,
				// DRAG SIZE
				SmoothStep<
					Scale<
						TwistAngle<>,
						IntArg<DRAG_SIZE_ARG,28000>,
						Int<30000>
					>,
					Int<3000>
				>
			>,
			// DRAG IN/OUT EFFECT
			TrWipeIn<200>,
			TrWipe<200>,
			SaberBase::LOCKUP_DRAG,
			Int<1>
		>,
		
		// STAB EFFECT
		LockupTrL<
			AlphaL<
				Stripes<
					2000,
					4000,
					Mix<
						TwistAngle<>,
						RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>,
						RotateColorsX<
							Int<3000>,
							RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>
						>
					>,
					Mix<
						Sin<
							Int<50>
						>,
						Black,
						Mix<
							TwistAngle<>,
							RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>,
							RotateColorsX<
								Int<3000>,
								RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>
							>
						>
					>,
					Mix<
						Int<4096>,
						Black,
						Mix<
							TwistAngle<>,
							RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>,
							RotateColorsX<
								Int<3000>,
								RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>
							>
						>
					>
				>,
				// STAB SIZE
				SmoothStep<
					Scale<
						TwistAngle<>,
						IntArg<MELT_SIZE_ARG,28000>,
						Int<30000>
					>,
					Int<3000>
				>
			>,
			// STAB START EFFECT
			TrConcat<
				TrExtend<
					4000,
					TrWipeIn<200>
				>,
				AlphaL<
					HumpFlicker<
						Mix<
							TwistAngle<>,
							RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>,
							RotateColorsX<
								Int<3000>,
								RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>
							>
						>,
						RotateColorsX<
							Int<3000>,
							Mix<
								TwistAngle<>,
								RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>,
								RotateColorsX<
									Int<3000>,
									RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>
								>
							>
						>,
						100
					>,
					SmoothStep<
						Scale<
							TwistAngle<>,
							IntArg<MELT_SIZE_ARG,28000>,
							Int<30000>
						>,
						Int<3000>
					>
				>,
				TrFade<4000>
			>,
			TrWipe<200>,
			SaberBase::LOCKUP_MELT,
			Int<1>
		>,
		
		// BLAST EFFECT
		TransitionEffectL<
			TrConcat<
				TrDelayX<
					Mult<
						WavLen<EFFECT_INTERACTIVE_BLAST>,
						Int<24576>
					>
				>,
				AlphaL<
					White,
					Int<0>
				>,
				TrDoEffect<
					TrInstant,
					EFFECT_GAME_CHOICE
				>
			>,
			EFFECT_INTERACTIVE_BLAST
		>,
		// EFFECT GAME CHOICE: Choose to deflect blast.
		TransitionEffectL<
			TrConcat<
				TrExtendX<
					IntArg<STYLE_OPTION2_ARG,1000>,
					TrInstant
				>,
				TransitionPulseL<
					TrDoEffect<
						TrInstant,
						EFFECT_BLAST
					>,
					ThresholdPulseF<
						SwingSpeed<300>,
						Int<16000>
					>
				>,
				TrInstant
			>,
			EFFECT_GAME_CHOICE
		>,
		
		// IN / OUT EFFECT
		InOutTrL<
			// IGNITION EFFECT
			TrSelect<
				IntArg<IGNITION_OPTION_ARG,0>,
				TrWipeSparkTipX<
					RgbArg<IGNITION_COLOR_ARG,Rgb<255,255,255>>,
					BendTimePowInvX<
						IgnitionTime<300>,
						Mult<
							IntArg<IGNITION_OPTION2_ARG,10992>,
							Int<98304>
						>
					>
				>,
				TrWipeX<
					BendTimePowInvX<
						IgnitionTime<300>,
						Mult<
							IntArg<IGNITION_OPTION2_ARG,10992>,
							Int<98304>
						>
					>
				>
			>,
			
			// RETRACTION EFFECT
			TrWipeInX<
				BendTimePowInvX<
					RetractionTime<0>,
					Mult<
						IntArg<RETRACTION_OPTION2_ARG,10992>,
						Int<98304>
					>
				>
			>,
			Black
		>,
		
		// EFFECT USER 7
		TransitionEffectL<
			TrConcat<
				TrDelayX<
					Int<1000>
				>,
				AlphaL<
					White,
					Int<0>
				>,
				TrConcat<
					TrInstant,
					AudioFlickerL<
						RgbArg<IGNITION_COLOR_ARG,Rgb<255,255,255>>
					>,
					TrFade<1200>
				>
			>,
			EFFECT_USER7
		>,
		
		TransitionEffectL<
			TrConcat<
				TrDelayX<
					Int<1000>
				>,
				Black,
				TrWipeX<
					Int<300>
				>
			>,
			EFFECT_USER7
		>,
		
		TransitionEffectL<
			TrConcat<
				TrDoEffectAlwaysX<
					TrDelayX<
						Int<1000>
					>,
					EFFECT_QUOTE,
					Int<1>,
					Int<-1>
				>,
				AlphaL<
					White,
					Int<0>
				>,
				TrDoEffectAlwaysX<
					TrInstant,
					EFFECT_FAST_ON,
					Int<-1>,
					Int<-1>
				>
			>,
			EFFECT_USER7
		>,
		
		// BATTERY LEVEL
		TransitionEffectL<
			TrConcat<
				TrJoin<
					TrDelay<2000>,
					TrWipe<1000>
				>,
				AlphaL<
					Mix<
						BatteryLevel,
						Red,
						Green
					>,
					SmoothStep<
						BatteryLevel,
						Int<-10>
					>
				>,
				TrWipeIn<1000>
			>,
			EFFECT_BATTERY_LEVEL
		>
	>
>(), “Ezra”},



{ "Fire Talzin;common", "tracks/mars.wav",
/* copyright Fett263 CustomBlade (Primary Blade) OS7 Style
https://fett263library.com/early-access/#CustomBlade
OS7.12 v2.231
Single Style
Multi Phase (Special Abilities*)
Default: Fire Blade Fast (Sparking) [BaseColorArg (Gradient Color Down = Gradient: 1203)
]
1: Blade of Talzin [AltColorArg]

Multi Phase Control: use Special Abilities controls to change Phase. Requires Alt Font.

NOTE:This style includes Control Layer. Only one Control Layer should be used per preset.

*This style REQUIRES Alt Fonts alt000/ to alt001/ to be set up. Uses altchng.wav on change.
See https://pod.hubbe.net/sound/alt_sounds.html for more information.
--Effects Included--
Interactive Preon: Light the Wick [Color: Multi Phase]
Interactive Preon = activate Preon, point down to light the tip, spark will travel to emitter to ignite. Requires/uses tr02.wav
Ignition Effect: Dual Mode Wipe (Down = Fast) [Color: IgnitionColorArg]
Retraction Effect: Dual Mode Wipe In (Up = Fast) [Color: RetractionColorArg]
CoolDown Effects: 0: Power Burst Reverse 1: Disable [Color:BaseColorArg (Gradient Color Up = Gradient: 1784)
]
PostOff Effect: Emitter Cool Off (Emitter Size) [Color: Multi Phase]
Lockup Effect:
0: mainLockMulti0Shape - Begin: Real Clash - Style: Intensity Flame - End: Full Blade Absorb
1: Responsive Localized - Begin: Real Clash - Style: Intensity Flame - End: Dissipate
[Color: Multi Phase]
Lightning Block Effect:
0: mainLBMulti0Shape - Begin: Responsive Impact - Style: Strobing AudioFlicker - End: Full Blade Absorb
[Color: LBColorArg]
Drag Effect:
0: mainDragMulti0Shape - Begin: Wipe In - Style: Intensity Fire Drag - End: Wipe Out
[Color: Multi Phase]
Melt Effect:
0: mainMeltMulti0Shape - Begin: Wipe In - Style: Fire Melt - End: Wipe Out
[Color: Multi Phase]
Stab Effect: Normal Stab [Color: Multi Phase]
Interactive Blast: Random Blasts - Default Level (Uses Style Option 2 for Editing): 1000 ms
Interactive Blast control requires blast.wav files in font. When Blast is triggered blast.wav will play, to deflect blast (blst.wav and visual effect) swing within 1000ms of blaster sound ending. Random number of blasts from 1 to multiple possible. Only one style per preset can contain.
Blast Effect: Blast Wave (Random) [Color: BlastColorArg]
Clash Effect: Real Clash V1 [Color: Multi Phase]
Swing Effect: Fire Swing (Scaled Responsive Edge) [Color: Multi Phase]
Emitter Effect: Unstable Flare with Random Pulse [Color: Multi Phase]
Battery Level: % Blade (Green to Red)
Special Ability 1: Next Phase
Special Ability 5: Next Phase
Special Ability 7: Play Sound - Ignite Uses tr00.wav or tr/000/000.wav
Special Ability 8: Play Sound - Ignite Uses tr01.wav or tr/001/000.wav

 */
StylePtr<
	Layers<
		// Blade Style
		Black,
		ColorSelect<
			AltF,
			TrSelect<
				Ifon<
					Int<1>,
					Int<0>
				>,
				TrInstant,
				TrWipeX<
					Int<1000>
				>
			>,
			StaticFire<
				Gradient<
					RotateColorsX<	
						Int<1203>,
						RgbArg<BASE_COLOR_ARG,Red>
					>,
					RgbArg<BASE_COLOR_ARG,Red>
				>,
				Mix<
					Int<10280>,
					Black,
					Gradient<
						RotateColorsX<
							Int<1203>,
							RgbArg<BASE_COLOR_ARG,Red>
						>,
						RgbArg<BASE_COLOR_ARG,Red>
					>
				>,
				0,
				3,
				0,
				3000,
				4
			>,
			StaticFire<
				Mix<
					SmoothStep<
						Scale<
							BladeAngle<>,
							Int<38000>,
							Int<23000>
						>,
						Int<8000>
					>,
					Mix<
						Int<400>,
						Black,
						RgbArg<ALT_COLOR_ARG,Green>
					>,
					Mix<
						Int<6000>,
						Black,
						RgbArg<ALT_COLOR_ARG,Green>
					>
				>,
				StripesX<
					Int<14000>,
					Scale<
						BladeAngle<>,
						Int<-5>,
						Int<-50>
					>,
					RgbArg<ALT_COLOR_ARG,Green>,
					Mix<
						Scale<
							HoldPeakF<
								SwingSpeed<250>,
								Int<1000>,
								Int<8000>
							>,
							Int<6000>,
							Int<16000>
						>,
						Black,
						RgbArg<ALT_COLOR_ARG,Green>
					>
				>,
				0,
				2,
				4,
				2000,
				2
			>
		>,
			
		// Spark 1
		TransitionLoopL<
			TrConcat<
				TrDelayX<
					Scale<
						SlowNoise<Int<100>>,
						Int<700>,
						Int<6000>
					>
				>,
				AlphaL<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Int<0>
				>,
				TrSparkX<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Scale<
						NoisySoundLevel,
						Int<125>,
						Int<125>
					>,
					Int<150>,
					Int<0>
				>
			>
		>,
		// Spark 2
		TransitionLoopL<
			TrConcat<
				TrDelayX<
					Scale<	
						SlowNoise<Int<100>>,
						Int<600>,
						Int<5000>
					>
				>,
				AlphaL<
					ColorSelect<	
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Int<0>
				>,
				TrSparkX<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Scale<
						NoisySoundLevel,
						Int<125>,
						Int<125>
					>,
					Int<125>,
					Int<0>
				>
			>
		>,
		// Spark 3
		TransitionLoopL<
			TrConcat<
				TrDelayX<
					Scale<
						SlowNoise<Int<100>>,
						Int<500>,
						Int<4000>
					>
				>,
				AlphaL<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Int<0>
				>,
				TrSparkX<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Scale<
						NoisySoundLevel,
						Int<125>,
						Int<125>
					>,
					Int<100>,
					Int<0>
				>
			>
		>,
		// Spark 4
		TransitionLoopL<
			TrConcat<
				TrDelayX<
					Scale<
						SlowNoise<Int<100>>,
						Int<500>,
						Int<3000>
					>
				>,
				AlphaL<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Int<0>
				>,
				TrSparkX<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Scale<
						NoisySoundLevel,
						Int<125>,
						Int<125>
					>,
					Int<75>,
					Int<0>
				>
			>
		>,
		// Spark 5
		TransitionLoopL<
			TrConcat<
				TrDelayX<
					Scale<
						SlowNoise<Int<100>>,
						Int<300>,
						Int<2000>
					>
				>,
				AlphaL<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Int<0>
				>,
				TrSparkX<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Scale<
						NoisySoundLevel,
						Int<125>,
						Int<125>
					>,
					Int<50>,
					Int<0>
				>
			>
		>,
		// Spark 6
		TransitionLoopL<
			TrConcat<
				TrDelayX<
					Scale<
						SlowNoise<Int<100>>,
						Int<200>,
						Int<1000>
					>
				>,
				AlphaL<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Int<0>
				>,
				TrSparkX<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
						Black
					>,
					Scale<
						NoisySoundLevel,
						Int<125>,
						Int<125>
					>,
					Int<25>,
					Int<0>
				>
			>
		>,
  
		// Sparking Emitter
		AlphaL<
			RandomPerLEDFlickerL<
				ColorSelect<
					AltF,
					TrInstant,
					RgbArg<EMITTER_COLOR_ARG,DodgerBlue>,
					Black
				>
			>,
			SmoothStep<
				Scale<
					NoisySoundLevel,
					IntArg<EMITTER_SIZE_ARG,2000>,
					Sum<
						IntArg<EMITTER_SIZE_ARG,2000>,
						Int<6000>
					>
				>,
				Int<-6000>
			>
		>,
		
		// Swing Effects
		AlphaL<
			AlphaL<
				Stripes<
					2800,
					-3000,
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<SWING_COLOR_ARG,Rgb<100,100,150>>,
						RgbArg<OFF_COLOR_ARG,Rgb<55,251,55>>
					>,
					Mix<
						Int<2096>,
						Black,
						ColorSelect<
							AltF,
							TrInstant,
							RgbArg<SWING_COLOR_ARG,Rgb<100,100,150>>,
							RgbArg<OFF_COLOR_ARG,Rgb<55,251,55>>
						>
					>,
					Mix<
						Int<16384>,
						Black,
						ColorSelect<
							AltF,
							TrInstant,
							RgbArg<SWING_COLOR_ARG,Rgb<100,100,150>>,
							RgbArg<OFF_COLOR_ARG,Rgb<55,251,55>>
						>
					>
				>,
				Scale<
					IsLessThan<
						SwingSpeed<600>,
						Int<13600>
					>,
					Scale<
						SwingSpeed<600>,
						Int<-19300>,
						Int<32768>
					>,
					Int<0>
				>
			>,
			SmoothStep<
				Scale<
					Scale<
						IsLessThan<
							SwingSpeed<600>,
							Int<13600>
						>,
						Scale<
							SwingSpeed<600>,
							Int<-19300>,
							Int<32768>
						>,
						Int<0>
					>,
					Int<28000>,
					Int<14000>
				>,
				Int<16000>
			>
		>,
		
		// Retraction Effect
		TransitionEffectL<
			TrSelect<	
				AltF,
				TrConcat<
					TrJoin<
						TrDelayX<
							RetractionTime<>
						>,
						TrInstant
					>,
					Stripes<
						5000,
						2500,
						Gradient<
							RgbArg<BASE_COLOR_ARG,Red>,
							RotateColorsX<
								Int<1784>,
								RgbArg<BASE_COLOR_ARG,Red>
							>
						>,
						Mix<
							Int<7710>,
							Black,
							Gradient<
								RgbArg<BASE_COLOR_ARG,Red>,
								RotateColorsX<
									Int<1784>,
									RgbArg<BASE_COLOR_ARG,Red>
								>
							>
						>,
						Mix<
							Int<3855>,
							Black,
							Gradient<
								RgbArg<BASE_COLOR_ARG,Red>,
								RotateColorsX<
									Int<1784>,
									RgbArg<BASE_COLOR_ARG,Red>
								>
							>
						>
					>,
					TrFade<800>
				>,
				TrInstant
			>,
			EFFECT_RETRACTION
		>,
	
		// Effect User 1?
		TransitionEffectL<
			TrDoEffectAlwaysX<
				TrInstant,
				EFFECT_ALT_SOUND,
				ModF<
					Sum<
						AltF,
						Int<1>
					>,
					Int<2>
				>,
				Int<-1>
			>,
			EFFECT_USER1
		>,
		
		// Stab Effect
		TransitionEffectL<
			TrConcat<
				TrJoin<
					TrDelayX<
						WavLen<>
					>,
					TrWipeIn<200>
				>,
				AlphaL<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<STAB_COLOR_ARG,DarkOrange>,
						RgbArg<ALT_COLOR2_ARG,Green>
					>,
					SmoothStep<
						IntArg<MELT_SIZE_ARG,28000>,
						Int<2000>
					>
				>,
				TrWipe<200>
			>,
			EFFECT_STAB
		>,
		
		// Blast Effect
		TransitionEffectL<
			TrWaveX<
				RgbArg<BLAST_COLOR_ARG,White>,
				Scale<
					EffectRandomF<EFFECT_BLAST>,
					Int<100>,
					Int<400>
				>,
				Int<100>,
				Scale<
					EffectPosition<EFFECT_BLAST>,
					Int<100>,
					Int<400>
				>,
				Scale<
					EffectPosition<EFFECT_BLAST>,
					Int<28000>,
					Int<8000>
				>
			>,
			EFFECT_BLAST
		>,
		
		// Clash Effect
		Mix<
			IsLessThan<
				ClashImpactF<>,
				Int<26000>
			>,
			// Clash A
			TransitionEffectL<
				TrConcat<
					TrInstant,
					AlphaL<
						ColorSelect<
							AltF,
							TrInstant,
							RgbArg<CLASH_COLOR_ARG,White>,
							Rgb<0,173,98>
						>,
						Bump<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0,16000>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<-12000>
									>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<10000>
									>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-10000>
								>
							>,
							Scale<
								ClashImpactF<>,
								Int<12000>,
								Int<60000>
							>
						>
					>,
					TrFadeX<
						Scale<
							ClashImpactF<>,
							Int<200>,
							Int<400>
						>
					>
				>,
				EFFECT_CLASH
			>,
			// Clash B
			TransitionEffectL<
				TrWaveX<
					ColorSelect<
						AltF,
						TrInstant,
						RgbArg<CLASH_COLOR_ARG,White>,
						Rgb<0,173,98>
					>,
					Scale<
						ClashImpactF<>,
						Int<100>,
						Int<400>
					>,
					Int<100>,
					Scale<
						ClashImpactF<>,
						Int<100>,
						Int<400>
					>,
					Scale<
						BladeAngle<>,
						Scale<
							BladeAngle<0,16000>,
							Sum<
								IntArg<LOCKUP_POSITION_ARG,16000>,
								Int<-12000>
							>,
							Sum<
								IntArg<LOCKUP_POSITION_ARG,16000>,
								Int<10000>
							>
						>,
						Sum<
							IntArg<LOCKUP_POSITION_ARG,16000>,
							Int<-10000>
						>
					>
				>,
				EFFECT_CLASH
			>
		>,
		
		// Lockup Effect
		LockupTrL<
			TransitionEffect<
				AlphaL<
					Remap<
						CenterDistF<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0,16000>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<-12000>
									>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<10000>
									>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-10000>
								>
							>
						>,
						Stripes<
							3600,
							-1600,
							Gradient<
								RotateColorsX<
									Scale<
										Sin<Int<46>>,
										Int<0>,
										Int<4652>
									>,
									ColorSelect<
										AltF,
										TrInstant,
										RgbArg<LOCKUP_COLOR_ARG,Orange>,
										Rgb<5,255,147>
									>
								>,
								RotateColorsX<
									Scale<
										Sin<Int<46>>,
										Int<4652>,
										Int<0>
									>,
									ColorSelect<
										AltF,
										TrInstant,
										RgbArg<LOCKUP_COLOR_ARG,Orange>,
										Rgb<5,255,147>
									>
								>
							>,
							Mix<
								Scale<
									SlowNoise<Int<1600>>,
									Int<4000>,
									Int<20000>
								>,
								Black,
								Gradient<
									RotateColorsX<
										Scale<
											Sin<Int<46>>,
											Int<0>,
											Int<4652>
										>,
										ColorSelect<
											AltF,
											TrInstant,
											RgbArg<LOCKUP_COLOR_ARG,Orange>,
											Rgb<5,255,147>
										>
									>,
									RotateColorsX<
										Scale<
											Sin<Int<46>>,
											Int<4652>,
											Int<0>
										>,
										ColorSelect<
											AltF,
											TrInstant,
											RgbArg<LOCKUP_COLOR_ARG,Orange>,
											Rgb<5,255,147>
										>
									>
								>
							>,
							Mix<
								Scale<
									SlowNoise<Int<2000>>,
									Int<16000>,
									Int<2000>
								>,
								Black,
								Gradient<
									RotateColorsX<
										Scale<
											Sin<Int<46>>,
											Int<0>,
											Int<4652>
										>,
										ColorSelect<
											AltF,
											TrInstant,
											RgbArg<LOCKUP_COLOR_ARG,Orange>,
											Rgb<5,255,147>
										>
									>,
									RotateColorsX<
										Scale<
											Sin<Int<46>>,
											Int<4652>,
											Int<0>
										>,
										ColorSelect<
											AltF,
											TrInstant,
											RgbArg<LOCKUP_COLOR_ARG,Orange>,
											Rgb<5,255,147>
										>
									>
								>
							>
						>
					>,
					Bump<
						Scale<
							BladeAngle<>,
							Scale<
								BladeAngle<0,16000>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-12000>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<10000>
								>
							>,
							Sum<
								IntArg<LOCKUP_POSITION_ARG,16000>,
								Int<-10000>
							>
						>,
						Scale<
							SwingSpeed<100>,
							Int<17000>,
							Int<25000>
						>
					>
				>,
				AlphaL<
					Remap<
						CenterDistF<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0,16000>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<-12000>
									>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<10000>
									>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-10000>
								>
							>
						>,
						Stripes<
							4200,
							-1200,
							Gradient<
								RotateColorsX<
									Scale<
										Sin<Int<46>>,
										Int<0>,
										Int<4652>
									>,
									ColorSelect<
										AltF,
										TrInstant,
										RgbArg<LOCKUP_COLOR_ARG,Orange>,
										Rgb<5,255,147>
									>
								>,
								RotateColorsX<
									Scale<
										Sin<Int<46>>,
										Int<4652>,
										Int<0>
									>,
									ColorSelect<
										AltF,
										TrInstant,
										RgbArg<LOCKUP_COLOR_ARG,Orange>,
										Rgb<5,255,147>
									>
								>
							>,
							Mix<
								Scale<
									SlowNoise<Int<1600>>,
									Int<4000>,
									Int<20000>
								>,
								Black,
								Gradient<
									RotateColorsX<
										Scale<
											Sin<Int<46>>,
											Int<0>,
											Int<4652>
										>,
										ColorSelect<
											AltF,
											TrInstant,
											RgbArg<LOCKUP_COLOR_ARG,Orange>,
											Rgb<5,255,147>
										>
									>,
									RotateColorsX<
										Scale<
											Sin<Int<46>>,
											Int<4652>,
											Int<0>
										>,
										ColorSelect<
											AltF,
											TrInstant,
											RgbArg<LOCKUP_COLOR_ARG,Orange>,
											Rgb<5,255,147>
										>
									>
								>
							>,
							Mix<
								Scale<
									SlowNoise<Int<2000>>,
									Int<16000>,
									Int<2000>
								>,
								Black,
								Gradient<
									RotateColorsX<
										Scale<
											Sin<Int<46>>,
											Int<0>,
											Int<4652>
										>,
										ColorSelect<
											AltF,
											TrInstant,
											RgbArg<LOCKUP_COLOR_ARG,Orange>,
											Rgb<5,255,147>
										>
									>,
									RotateColorsX<
										Scale<
											Sin<Int<46>>,
											Int<4652>,
											Int<0>
										>,
										ColorSelect<
											AltF,
											TrInstant,
											RgbArg<LOCKUP_COLOR_ARG,Orange>,
											Rgb<5,255,147>
										>
									>
								>
							>
						>
					>,
					Bump<
						Scale<
							BladeAngle<>,
							Scale<
								BladeAngle<0,16000>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-12000>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<10000>
								>
							>,
							Sum<
								IntArg<LOCKUP_POSITION_ARG,16000>,
								Int<-10000>
							>
						>,
						Scale<
							SwingSpeed<100>,
							Int<17000>,
							Int<25000>
						>
					>
				>,
				TrExtend<
					5000,
					TrInstant
				>,
				TrFade<5000>,
				EFFECT_LOCKUP_BEGIN
			>,
			// Lockup Effect
			TrConcat<
				TrJoin<
					TrDelay<50>,
					TrInstant
				>,
				Mix<
					IsLessThan<
						ClashImpactF<>,
						Int<26000>
					>,
					Gradient<
						RotateColorsX<
							Scale<
								Sin<Int<46>>,
								Int<0>,
								Int<4652>
							>,
							ColorSelect<
								AltF,
								TrInstant,
								RgbArg<LOCKUP_COLOR_ARG,Orange>,
								Rgb<5,255,147>
							>
						>,
						RotateColorsX<
							Scale<
								Sin<Int<46>>,
								Int<4652>,
								Int<0>
							>,
							ColorSelect<
								AltF,
								TrInstant,
								RgbArg<LOCKUP_COLOR_ARG,Orange>,
								Rgb<5,255,147>
							>
						>
					>,
					AlphaL<
						Gradient<
							RotateColorsX<
								Scale<
									Sin<Int<46>>,
									Int<0>,
									Int<4652>
								>,
								ColorSelect<
									AltF,
									TrInstant,
									RgbArg<LOCKUP_COLOR_ARG,Orange>,
									Rgb<5,255,147>
								>
							>,
							RotateColorsX<
								Scale<
									Sin<Int<46>>,
									Int<4652>,
									Int<0>
								>,
								ColorSelect<
									AltF,
									TrInstant,
									RgbArg<LOCKUP_COLOR_ARG,Orange>,
									Rgb<5,255,147>
								>
							>
						>,
						Bump<
							Scale<
								BladeAngle<>,
								Scale<
									BladeAngle<0,16000>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<-12000>
									>,
									Sum<
										IntArg<LOCKUP_POSITION_ARG,16000>,
										Int<10000>
									>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-10000>
								>
							>,
							Scale<
								ClashImpactF<>,
								Int<20000>,
								Int<60000>
							>
						>
					>
				>,
				TrFade<300>
			>,
			TrConcat<
				TrInstant,
				AlphaL<
					Gradient<
						RotateColorsX<
							Scale<
								Sin<Int<46>>,
								Int<0>,
								Int<4652>
							>,
							ColorSelect<
								AltF,
								TrInstant,
								RgbArg<LOCKUP_COLOR_ARG,Orange>,
								Rgb<5,255,147>
							>
						>,
						RotateColorsX<
							Scale<
								Sin<Int<46>>,
								Int<4652>,
								Int<0>
							>,
							ColorSelect<
								AltF,
								TrInstant,
								RgbArg<LOCKUP_COLOR_ARG,Orange>,
								Rgb<5,255,147>
							>
						>
					>,
					Bump<
						Scale<
							BladeAngle<>,
							Scale<
								BladeAngle<0,16000>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<-12000>
								>,
								Sum<
									IntArg<LOCKUP_POSITION_ARG,16000>,
									Int<10000>
								>
							>,
							Sum<
								IntArg<LOCKUP_POSITION_ARG,16000>,
								Int<-10000>
							>
						>,
						Int<13000>
					>
				>,
				TrFade<400>
			>,
			SaberBase::LOCKUP_NORMAL
		>,
		
		// Lightning Block
		ResponsiveLightningBlockL<
			Strobe<
				Gradient<
					RotateColorsX<
						Scale<
							Sin<Int<73>>,
							Int<0>,
							Int<8817>
						>,
						RgbArg<LB_COLOR_ARG,Rgb<85,85,200>>
					>,
					RotateColorsX<
						Scale<
							Sin<Int<73>>,
							Int<8817>,
							Int<0>
						>,
						RgbArg<LB_COLOR_ARG,Rgb<85,85,200>>
					>
				>,
				AudioFlicker<
					Gradient<
						RotateColorsX<
							Scale<
								Sin<Int<73>>,
								Int<0>,
								Int<8817>
							>,
							RgbArg<LB_COLOR_ARG,Rgb<85,85,200>>
						>,
						RotateColorsX<
							Scale<
								Sin<Int<73>>,
								Int<8817>,
								Int<0>
							>,
							RgbArg<LB_COLOR_ARG,Rgb<85,85,200>>
						>
					>,
					Blue
				>,
				50,
				1
			>,
			TrConcat<
				TrExtend<
					200,
					TrInstant
				>,
				AlphaL<
					Gradient<
						RotateColorsX<
							Scale<
								Sin<Int<73>>,
								Int<0>,
								Int<8817>
							>,
							RgbArg<LB_COLOR_ARG,Rgb<85,85,200>>
						>,
						RotateColorsX<
							Scale<
								Sin<Int<73>>,
								Int<8817>,
								Int<0>
							>,
							RgbArg<LB_COLOR_ARG,Rgb<85,85,200>>
						>
					>,
					Bump<
						Scale<
							BladeAngle<>,
							Int<10000>,
							Int<21000>
						>,
						Int<10000>
					>
				>,
				TrFade<200>
			>,
			TrConcat<
				TrInstant,
				Gradient<
					RotateColorsX<
						Scale<
							Sin<Int<73>>,
							Int<0>,
							Int<8817>
						>,
						RgbArg<LB_COLOR_ARG,Rgb<85,85,200>>
					>,
					RotateColorsX<
						Scale<
							Sin<Int<73>>,
							Int<8817>,
							Int<0>
						>,
						RgbArg<LB_COLOR_ARG,Rgb<85,85,200>>
					>
				>,
				TrFade<400>
			>
		>,
		
		// Drag Effect
		LockupTrL<
			AlphaL<
				TransitionEffect<
					Stripes<
						2000,
						4000,
						ColorSelect<
							AltF,
							TrInstant,
							RgbArg<STAB_COLOR_ARG,DarkOrange>,
							Aquamarine
						>,
						Mix<
							Sin<Int<50>>,
							Black,
							ColorSelect<
								AltF,
								TrInstant,
								RgbArg<STAB_COLOR_ARG,DarkOrange>,
								Aquamarine
							>
						>,
						Mix<
							Int<4096>,
							Black,
							ColorSelect<
								AltF,
								TrInstant,
								RgbArg<STAB_COLOR_ARG,DarkOrange>,
								Aquamarine
							>
						>
					>,
					Stripes<
						2000,
						3000,
						ColorSelect<
							AltF,
							TrInstant,
							RgbArg<STAB_COLOR_ARG,DarkOrange>,
							Aquamarine
						>,
						Mix<
							Sin<Int<30>>,
							Black,
							ColorSelect<
								AltF,
								TrInstant,
								RgbArg<STAB_COLOR_ARG,DarkOrange>,
								Aquamarine
							>
						>,
						Mix<
							Int<8192>,
							Black,
							ColorSelect<
								AltF,
								TrInstant,
								RgbArg<STAB_COLOR_ARG,DarkOrange>,
								Aquamarine
							>
						>
					>,
					TrExtend<
						4000,
						TrInstant
					>,
					TrFade<4000>,
					EFFECT_DRAG_BEGIN
				>,
				SmoothStep<
					Scale<
						TwistAngle<>,
						IntArg<DRAG_SIZE_ARG,28000>,
						Int<30000>
					>,
					Int<3000>
				>
			>,
			TrWipeIn<200>,
			TrWipe<200>,
			SaberBase::LOCKUP_DRAG
		>,
		
		// Melt Effect
		LockupTrL<
			AlphaL<
				Stripes<
					2000,
					3000,
					Gradient<
						RotateColorsX<
							Scale<
								Sin<Int<20>>,
								Int<0>,
								Int<4096>
							>,
							ColorSelect<
								AltF,
								TrInstant,
								RgbArg<STAB_COLOR_ARG,DarkOrange>,
								RgbArg<ALT_COLOR2_ARG,Green>
							>
						>,
						RotateColorsX<
							Scale<
								Sin<Int<20>>,
								Int<4096>,
								Int<0>
							>,
							ColorSelect<
								AltF,
								TrInstant,
								RgbArg<STAB_COLOR_ARG,DarkOrange>,
								RgbArg<ALT_COLOR2_ARG,Green>
							>
						>
					>,
					Mix<
						Sin<Int<30>>,
						Black,
						Gradient<
							RotateColorsX<
								Scale<
									Sin<Int<20>>,
									Int<0>,
									Int<4096>
								>,
								ColorSelect<
									AltF,
									TrInstant,
									RgbArg<STAB_COLOR_ARG,DarkOrange>,
									RgbArg<ALT_COLOR2_ARG,Green>
								>
							>,
							RotateColorsX<
								Scale<
									Sin<Int<20>>,
									Int<4096>,
									Int<0>
								>,
								ColorSelect<
									AltF,
									TrInstant,
									RgbArg<STAB_COLOR_ARG,DarkOrange>,
									RgbArg<ALT_COLOR2_ARG,Green>
								>
							>
						>
					>,
					Mix<
						Int<8192>,
						Black,
						Gradient<
							RotateColorsX<
								Scale<
									Sin<Int<20>>,
									Int<0>,
									Int<4096>
								>,
								ColorSelect<
									AltF,
									TrInstant,
									RgbArg<STAB_COLOR_ARG,DarkOrange>,
									RgbArg<ALT_COLOR2_ARG,Green>
								>
							>,
							RotateColorsX<
								Scale<
									Sin<Int<20>>,
									Int<4096>,
									Int<0>
								>,
								ColorSelect<
									AltF,
									TrInstant,
									RgbArg<STAB_COLOR_ARG,DarkOrange>,
									RgbArg<ALT_COLOR2_ARG,Green>
								>
							>
						>
					>
				>,
				SmoothStep<
					Scale<
						TwistAngle<>,
						IntArg<MELT_SIZE_ARG,28000>,
						Int<30000>
					>,
					Int<3000>
				>
			>,
			TrWipeIn<200>,
			TrWipe<200>,
			SaberBase::LOCKUP_MELT
		>,
  
		// Interactive Blast
		TransitionEffectL<
			TrConcat<
				TrDelay<100>,
				AlphaL<
					White,
					Int<0>
				>,
				TrDoEffect<
					TrInstant,
					EFFECT_GAME_CHOICE
				>
			>,
			EFFECT_INTERACTIVE_BLAST
		>,
		// Interactive Blast Choice
		TransitionEffectL<
			TrConcat<
				TrExtendX<
					Sum<
						WavLen<EFFECT_INTERACTIVE_BLAST>,
						IntArg<STYLE_OPTION2_ARG,1000>
					>,
					TrInstant
				>,
				TransitionPulseL<
					TrDoEffect<
						TrInstant,
						EFFECT_BLAST
					>,
					ThresholdPulseF<
						SwingSpeed<300>,
						Int<16000>
					>
				>,
				TrConcat<
					TrDelay<150>,
					TrRandom<
						TrDoEffect<
							TrInstant,
							EFFECT_INTERACTIVE_BLAST
						>,
						TrInstant,
						TrDoEffect<
							TrInstant,
							EFFECT_INTERACTIVE_BLAST
						>,
						TrDoEffect<
							TrInstant,
							EFFECT_INTERACTIVE_BLAST
						>
					>
				>
			>,
			EFFECT_GAME_CHOICE
		>,
		
		// In/Out Effect
		InOutTrL<
			// Ignition Effect
			TrSelect<
				IncrementWithReset<
					ThresholdPulseF<
						Sum<
							EffectPulseF<EFFECT_USER7>,
							EffectPulseF<EFFECT_USER8>
						>,
						Int<30000>
					>,
					EffectPulseF<EFFECT_RETRACTION>,
					Int<1>
				>,
				TrWipeX<
					Scale<
						IsLessThan<
							BladeAngle<>,
							Int<16000>
						>,
						IgnitionTime<>,
						Mult<
							IgnitionTime<>,
							Int<16384>
						>
					>
				>,
				TrInstant
			>,
			// Retraction Effect
			TrWipeInX<
				Scale<
					IsLessThan<
						BladeAngle<>,
						Int<16000>
					>,
					Mult<
						RetractionTime<>,
						Int<16384>
					>,
					RetractionTime<>
				>
			>,
			// Off Color / Interactive Preon?
			Layers<
				Black,
				// Interactive Preon?
				TransitionEffectL<
					TrConcat<
						TrFade<100>,
						AlphaL<
							Gradient<
								RotateColorsX<
									Scale<
										Sin<Int<41>>,
										Int<0>,
										Int<2153>
									>,
									ColorSelect<
										AltF,
										TrInstant,
										RgbArg<PREON_COLOR_ARG,Red>,
										Green
									>
								>,
								RotateColorsX<
									Scale<
										Sin<Int<41>>,
										Int<2153>,
										Int<0>
									>,
									ColorSelect<
										AltF,
										TrInstant,
										RgbArg<PREON_COLOR_ARG,Red>,
										Green
									>
								>
							>,
							SmoothStep<
								Int<4000>,
								Int<-2000>
							>
						>,
						TrExtend<
							4000,
							TrInstant
						>,
						TransitionPulseL<
							TrConcat<
								TrDoEffectAlways<
									TrInstant,
									EFFECT_TRANSITION_SOUND,
									2
								>,
								AlphaL<
									White,
									Int<0>
								>,
								TrSparkX<
									BrownNoiseFlickerL<
										Gradient<
											RotateColorsX<
												Scale<
													Sin<Int<41>>,
													Int<0>,
													Int<2153>
												>,
												ColorSelect<
													AltF,
													TrInstant,
													RgbArg<PREON_COLOR_ARG,Red>,
													Green
												>
											>,
											RotateColorsX<
												Scale<
													Sin<Int<41>>,
													Int<2153>,
													Int<0>
												>,
												ColorSelect<
													AltF,
													TrInstant,
													RgbArg<PREON_COLOR_ARG,Red>,
													Green
												>
											>
										>,
										Int<200>
									>,
									Int<400>,
									WavLen<EFFECT_TRANSITION_SOUND>,
									Int<32768>
								>,
								AlphaL<
									White,
									Int<0>
								>,
								TrDelay<100>,
								AlphaL<
									White,
									Int<0>
								>,
								TrDoEffectAlways<
									TrInstant,
									EFFECT_FAST_ON
								>
							>,
							ThresholdPulseF<
								IsLessThan<
									BladeAngle<>,
									Int<2000>
								>,
								Int<30000>
							>
						>,
						TrInstant
					>,
					EFFECT_INTERACTIVE_PREON
				>
			>
		>,
		
		// EffecT User 7
		TransitionEffectL<
			TrConcat<
				TrInstant,
				Black,
				TrWipeSparkTipX<
					RgbArg<IGNITION_COLOR_ARG,Rgb<85,85,200>>,
					Int<300>
				>
			>,
			EFFECT_USER7
		>,
		
		// Effect User 8
		TransitionEffectL<
			TrConcat<
				TrInstant,
				HumpFlickerL<
					RgbArg<IGNITION_COLOR_ARG,Rgb<85,85,200>>,
					40
				>,
				TrFade<1200>
			>,
			EFFECT_USER8
		>,
		// Effect User 8 ??
		TransitionEffectL<
			TrConcat<
				TrInstant,
				Black,
				TrJoinR<
					TrCenterWipeInX<
						Int<300>
					>,
					TrSmoothFadeX<
						Int<300>
					>
				>
			>,
			EFFECT_USER8
		>,
		
		// Effect User5
		TransitionEffectL<
			TrDoEffectAlwaysX<
				TrInstant,
				EFFECT_ALT_SOUND,
				ModF<
					Sum<
						AltF,
						Int<1>
					>,
					Int<2>
				>,
				Int<-1>
			>,
			EFFECT_USER5
		>,
		
		// Effect User 7 FastOn
		TransitionEffectL<
			TrDoEffectAlwaysX<
				TrDoEffectAlwaysX<
					TrInstant,
					EFFECT_FAST_ON,
					Int<-1>,
					Int<-1>
				>,
				EFFECT_TRANSITION_SOUND,
				Int<0>,
				Int<-1>
			>,
			EFFECT_USER7
		>,
		
		// Effect User8  FastOn
		TransitionEffectL<
			TrDoEffectAlwaysX<
				TrDoEffectAlwaysX<
					TrInstant,
					EFFECT_FAST_ON,
					Int<-1>,
					Int<-1>
				>,
				EFFECT_TRANSITION_SOUND,
				Int<1>,
				Int<-1>
			>,
			EFFECT_USER8
		>,
		
		// Post Off Effect
		TransitionEffectL<
			TrConcat<
				TrInstant,
				AlphaL<
					Magenta,
					SmoothStep<
						IntArg<EMITTER_SIZE_ARG,2000>,
						Int<-4000>
					>
				>,
				TrFadeX<
					Mult<
						Scale<
							IsLessThan<
								WavLen<EFFECT_POSTOFF>,
								Int<200>
							>,
							WavLen<EFFECT_POSTOFF>,
							Int<4000>
						>,
						Int<10923>
					>
				>,
				AlphaL<
					SteelBlue,
					SmoothStep<
						IntArg<EMITTER_SIZE_ARG,2000>,
						Int<-4000>
					>
				>,
				TrFadeX<
					Mult<
						Scale<
							IsLessThan<
								WavLen<EFFECT_POSTOFF>,
								Int<200>
							>,
							WavLen<EFFECT_POSTOFF>,
							Int<4000>
						>,
						Int<10923>
					>
				>,
				AlphaL<
					White,
					SmoothStep<
						IntArg<EMITTER_SIZE_ARG,2000>,
						Int<-2000>
					>
				>,
				TrFadeX<
					Mult<
						Scale<
							IsLessThan<
								WavLen<EFFECT_POSTOFF>,
								Int<200>
							>,
							WavLen<EFFECT_POSTOFF>,
							Int<4000>
						>,
						Int<10923>
					>
				>
			>,
			EFFECT_POSTOFF
		>,
		
		// Battery Level
		TransitionEffectL<
			TrConcat<
				TrJoin<
					TrDelay<2000>,
					TrWipe<1000>
				>,
				AlphaL<
					Mix<
						BatteryLevel,
						Red,
						Green
					>,
					SmoothStep<
						BatteryLevel,
						Int<-10>
					>
				>,
				TrWipeIn<1000>
			>,
			EFFECT_BATTERY_LEVEL
		>
	>
>
()},


Layers<AudioFlicker<RgbArg<BASE_COLOR_ARG,Rgb<200,0,255>>,Mix<Int<16448>,Black,RgbArg<BASE_COLOR_ARG,Rgb<200,0,255>>>>,TransitionEffectL<TrConcat<TrJoin<TrDelayX<IgnitionTime<300>>,TrInstant>,Stripes<3000,-3500,RgbArg<IGNITION_COLOR_ARG,Rgb<255,255,255>>,RandomPerLEDFlicker<Mix<Int<7710>,Black,RgbArg<IGNITION_COLOR_ARG,Rgb<255,255,255>>>,Black>,BrownNoiseFlicker<RgbArg<IGNITION_COLOR_ARG,Rgb<255,255,255>>,Mix<Int<3855>,Black,RgbArg<IGNITION_COLOR_ARG,Rgb<255,255,255>>>,200>,RandomPerLEDFlicker<Mix<Int<3137>,Black,RgbArg<IGNITION_COLOR_ARG,Rgb<255,255,255>>>,Mix<Int<3855>,Black,RgbArg<IGNITION_COLOR_ARG,Rgb<255,255,255>>>>>,TrFade<800>>,EFFECT_IGNITION>,TransitionEffectL<TrConcat<TrJoin<TrDelayX<RetractionTime<0>>,TrInstant>,RgbArg<RETRACTION_COLOR_ARG,Rgb<255,255,255>>,TrFade<1000>>,EFFECT_RETRACTION>,TransitionEffectL<TrWaveX<RgbArg<BLAST_COLOR_ARG,Rgb<255,255,255>>,Scale<EffectRandomF<EFFECT_BLAST>,Int<100>,Int<400>>,Int<100>,Scale<EffectPosition<EFFECT_BLAST>,Int<100>,Int<400>>,Scale<EffectPosition<EFFECT_BLAST>,Int<28000>,Int<8000>>>,EFFECT_BLAST>,TransitionEffectL<TrConcat<TrInstant,AlphaL<RgbArg<CLASH_COLOR_ARG,Rgb<255,255,255>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-10000>>>,Scale<ClashImpactF<>,Int<12000>,Int<60000>>>>,TrFadeX<Scale<ClashImpactF<>,Int<200>,Int<400>>>>,EFFECT_CLASH>,LockupTrL<TransitionEffect<AlphaL<AlphaMixL<Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-10000>>>,Scale<SwingSpeed<100>,Int<14000>,Int<22000>>>,AudioFlicker<RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,Mix<Int<12000>,Black,RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>>>,BrownNoiseFlicker<RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,Mix<Int<12000>,Black,RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>>,300>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-10000>>>,Scale<SwingSpeed<100>,Int<14000>,Int<22000>>>>,AlphaL<AudioFlicker<RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,Mix<Int<20000>,Black,RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-10000>>>,Scale<SwingSpeed<100>,Int<14000>,Int<18000>>>>,TrExtend<5000,TrInstant>,TrFade<5000>,EFFECT_LOCKUP_BEGIN>,TrConcat<TrJoin<TrDelay<50>,TrInstant>,Mix<IsLessThan<ClashImpactF<>,Int<26000>>,RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,AlphaL<RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,Bump<Scale<BladeAngle<>,Scale<BladeAngle<0,16000>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-12000>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<10000>>>,Sum<IntArg<LOCKUP_POSITION_ARG,16000>,Int<-10000>>>,Scale<ClashImpactF<>,Int<20000>,Int<60000>>>>>,TrFade<300>>,TrConcat<TrInstant,RgbArg<LOCKUP_COLOR_ARG,Rgb<255,255,255>>,TrFade<400>>,SaberBase::LOCKUP_NORMAL,Int<1>>,ResponsiveLightningBlockL<Strobe<RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,AudioFlicker<RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,Blue>,50,1>,TrConcat<TrExtend<200,TrInstant>,AlphaL<RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,Bump<Scale<BladeAngle<>,Int<10000>,Int<21000>>,Int<10000>>>,TrFade<200>>,TrConcat<TrInstant,RgbArg<LB_COLOR_ARG,Rgb<255,255,255>>,TrFade<400>>,Int<1>>,LockupTrL<AlphaL<TransitionEffect<RandomPerLEDFlickerL<RgbArg<DRAG_COLOR_ARG,Rgb<255,255,255>>>,BrownNoiseFlickerL<RgbArg<DRAG_COLOR_ARG,Rgb<255,255,255>>,Int<300>>,TrExtend<4000,TrInstant>,TrFade<4000>,EFFECT_DRAG_BEGIN>,SmoothStep<Scale<TwistAngle<>,IntArg<DRAG_SIZE_ARG,28000>,Int<30000>>,Int<3000>>>,TrWipeIn<200>,TrWipe<200>,SaberBase::LOCKUP_DRAG,Int<1>>,LockupTrL<AlphaL<Stripes<2000,4000,Mix<TwistAngle<>,RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>,RotateColorsX<Int<3000>,RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>>>,Mix<Sin<Int<50>>,Black,Mix<TwistAngle<>,RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>,RotateColorsX<Int<3000>,RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>>>>,Mix<Int<4096>,Black,Mix<TwistAngle<>,RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>,RotateColorsX<Int<3000>,RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>>>>>,SmoothStep<Scale<TwistAngle<>,IntArg<MELT_SIZE_ARG,28000>,Int<30000>>,Int<3000>>>,TrConcat<TrExtend<4000,TrWipeIn<200>>,AlphaL<HumpFlicker<Mix<TwistAngle<>,RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>,RotateColorsX<Int<3000>,RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>>>,RotateColorsX<Int<3000>,Mix<TwistAngle<>,RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>,RotateColorsX<Int<3000>,RgbArg<STAB_COLOR_ARG,Rgb<255,68,0>>>>>,100>,SmoothStep<Scale<TwistAngle<>,IntArg<MELT_SIZE_ARG,28000>,Int<30000>>,Int<3000>>>,TrFade<4000>>,TrWipe<200>,SaberBase::LOCKUP_MELT,Int<1>>,InOutTrL<TrWipeSparkTipX<RgbArg<IGNITION_COLOR_ARG,Rgb<255,255,255>>,BendTimePowInvX<IgnitionTime<300>,Mult<IntArg<IGNITION_OPTION2_ARG,10992>,Int<98304>>>>,TrWipeInSparkTipX<RgbArg<RETRACTION_COLOR_ARG,Rgb<255,255,255>>,BendTimePowInvX<RetractionTime<0>,Mult<IntArg<RETRACTION_OPTION2_ARG,10992>,Int<98304>>>>,Layers<Black,TransitionEffectL<TrConcat<TrDoEffectAlways<TrInstant,EFFECT_TRANSITION_SOUND,0>,Layers<TransitionPulseL<TrDoEffectAlways<TrInstant,EFFECT_FAST_ON>,EffectPulseF<EFFECT_OFF_CLASH>>,AlphaL<BrownNoiseFlickerL<RgbArg<PREON_COLOR_ARG,Rgb<255,255,255>>,Int<100>>,SmoothStep<Scale<NoisySoundLevel,Int<1000>,Int<8000>>,Int<-3000>>>>,TrDelayX<WavLen<EFFECT_TRANSITION_SOUND>>>,EFFECT_INTERACTIVE_PREON>>>>